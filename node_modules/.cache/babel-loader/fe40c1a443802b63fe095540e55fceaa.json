{"ast":null,"code":"\"use strict\";\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\n\nconst _ = require(\"lodash\");\n\nconst xmlq = require(\"./xmlq\");\n\nconst colorIndexes = require(\"./colorIndexes\");\n/**\n * A style.\n * @ignore\n */\n\n\nclass Style {\n  /**\n   * Creates a new instance of _Style.\n   * @constructor\n   * @param {StyleSheet} styleSheet - The styleSheet.\n   * @param {number} id - The style ID.\n   * @param {{}} xfNode - The xf node.\n   * @param {{}} fontNode - The font node.\n   * @param {{}} fillNode - The fill node.\n   * @param {{}} borderNode - The border node.\n   */\n  constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n    this._styleSheet = styleSheet;\n    this._id = id;\n    this._xfNode = xfNode;\n    this._fontNode = fontNode;\n    this._fillNode = fillNode;\n    this._borderNode = borderNode;\n  }\n  /**\n   * Gets the style ID.\n   * @returns {number} The ID.\n   */\n\n\n  id() {\n    return this._id;\n  }\n  /**\n   * Gets or sets a style.\n   * @param {string} name - The style name.\n   * @param {*} [value] - The value to set.\n   * @returns {*|Style} The value if getting or the style if setting.\n   */\n\n\n  style() {\n    return new ArgHandler(\"_Style.style\").case('string', name => {\n      const getterName = `_get_${name}`;\n      if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n      return this[getterName]();\n    }).case(['string', '*'], (name, value) => {\n      const setterName = `_set_${name}`;\n      if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n      this[setterName](value);\n      return this;\n    }).handle(arguments);\n  }\n\n  _getColor(node, name) {\n    const child = xmlq.findChild(node, name);\n    if (!child || !child.attributes) return;\n    const color = {};\n    if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n    if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n    if (_.isEmpty(color)) return;\n    return color;\n  }\n\n  _setColor(node, name, color) {\n    if (typeof color === \"string\") color = {\n      rgb: color\n    };else if (typeof color === \"number\") color = {\n      theme: color\n    };\n    xmlq.setChildAttributes(node, name, {\n      rgb: color && color.rgb && color.rgb.toUpperCase(),\n      indexed: null,\n      theme: color && color.theme,\n      tint: color && color.tint\n    });\n    xmlq.removeChildIfEmpty(node, 'color');\n  }\n\n  _get_bold() {\n    return xmlq.hasChild(this._fontNode, 'b');\n  }\n\n  _set_bold(bold) {\n    if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n  }\n\n  _get_italic() {\n    return xmlq.hasChild(this._fontNode, 'i');\n  }\n\n  _set_italic(italic) {\n    if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n  }\n\n  _get_underline() {\n    const uNode = xmlq.findChild(this._fontNode, 'u');\n    return uNode ? uNode.attributes.val || true : false;\n  }\n\n  _set_underline(underline) {\n    if (underline) {\n      const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n      const val = typeof underline === 'string' ? underline : null;\n      xmlq.setAttributes(uNode, {\n        val\n      });\n    } else {\n      xmlq.removeChild(this._fontNode, 'u');\n    }\n  }\n\n  _get_strikethrough() {\n    return xmlq.hasChild(this._fontNode, 'strike');\n  }\n\n  _set_strikethrough(strikethrough) {\n    if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n  }\n\n  _getFontVerticalAlignment() {\n    return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n  }\n\n  _setFontVerticalAlignment(alignment) {\n    xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n      val: alignment\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n  }\n\n  _get_subscript() {\n    return this._getFontVerticalAlignment() === \"subscript\";\n  }\n\n  _set_subscript(subscript) {\n    this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n  }\n\n  _get_superscript() {\n    return this._getFontVerticalAlignment() === \"superscript\";\n  }\n\n  _set_superscript(superscript) {\n    this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n  }\n\n  _get_fontSize() {\n    return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n  }\n\n  _set_fontSize(size) {\n    xmlq.setChildAttributes(this._fontNode, 'sz', {\n      val: size\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n  }\n\n  _get_fontFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n  }\n\n  _set_fontFamily(family) {\n    xmlq.setChildAttributes(this._fontNode, 'name', {\n      val: family\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'name');\n  }\n\n  _get_fontGenericFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n  }\n\n  _set_fontGenericFamily(genericFamily) {\n    xmlq.setChildAttributes(this._fontNode, 'family', {\n      val: genericFamily\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'family');\n  }\n\n  _get_fontColor() {\n    return this._getColor(this._fontNode, \"color\");\n  }\n\n  _set_fontColor(color) {\n    this._setColor(this._fontNode, \"color\", color);\n  }\n\n  _get_fontScheme() {\n    // can be 'minor', 'major', 'none'\n    return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n  }\n\n  _set_fontScheme(scheme) {\n    xmlq.setChildAttributes(this._fontNode, 'scheme', {\n      val: scheme\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n  }\n\n  _get_horizontalAlignment() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n  }\n\n  _set_horizontalAlignment(alignment) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      horizontal: alignment\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_justifyLastLine() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n  }\n\n  _set_justifyLastLine(justifyLastLine) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      justifyLastLine: justifyLastLine ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_indent() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n  }\n\n  _set_indent(indent) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      indent\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_verticalAlignment() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n  }\n\n  _set_verticalAlignment(alignment) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      vertical: alignment\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_wrapText() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n  }\n\n  _set_wrapText(wrapText) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      wrapText: wrapText ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_shrinkToFit() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n  }\n\n  _set_shrinkToFit(shrinkToFit) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      shrinkToFit: shrinkToFit ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_textDirection() {\n    const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n    if (readingOrder === 1) return \"left-to-right\";\n    if (readingOrder === 2) return \"right-to-left\";\n    return readingOrder;\n  }\n\n  _set_textDirection(textDirection) {\n    let readingOrder;\n    if (textDirection === \"left-to-right\") readingOrder = 1;else if (textDirection === \"right-to-left\") readingOrder = 2;\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      readingOrder\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _getTextRotation() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n  }\n\n  _setTextRotation(textRotation) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      textRotation\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n\n  _get_textRotation() {\n    let textRotation = this._getTextRotation(); // Negative angles in Excel correspond to values > 90 in OOXML.\n\n\n    if (textRotation > 90) textRotation = 90 - textRotation;\n    return textRotation;\n  }\n\n  _set_textRotation(textRotation) {\n    // Negative angles in Excel correspond to values > 90 in OOXML.\n    if (textRotation < 0) textRotation = 90 - textRotation;\n\n    this._setTextRotation(textRotation);\n  }\n\n  _get_angleTextCounterclockwise() {\n    return this._getTextRotation() === 45;\n  }\n\n  _set_angleTextCounterclockwise(value) {\n    this._setTextRotation(value ? 45 : null);\n  }\n\n  _get_angleTextClockwise() {\n    return this._getTextRotation() === 135;\n  }\n\n  _set_angleTextClockwise(value) {\n    this._setTextRotation(value ? 135 : null);\n  }\n\n  _get_rotateTextUp() {\n    return this._getTextRotation() === 90;\n  }\n\n  _set_rotateTextUp(value) {\n    this._setTextRotation(value ? 90 : null);\n  }\n\n  _get_rotateTextDown() {\n    return this._getTextRotation() === 180;\n  }\n\n  _set_rotateTextDown(value) {\n    this._setTextRotation(value ? 180 : null);\n  }\n\n  _get_verticalText() {\n    return this._getTextRotation() === 255;\n  }\n\n  _set_verticalText(value) {\n    this._setTextRotation(value ? 255 : null);\n  }\n\n  _get_fill() {\n    const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill'); // jq.get(this._fillNode, \"patternFill[0]\");\n\n    const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill'); // jq.get(this._fillNode, \"gradientFill[0]\");\n\n    const patternType = patternFillNode && patternFillNode.attributes.patternType; // jq.get(patternFillNode, \"$.patternType\");\n\n    if (patternType === \"solid\") {\n      return {\n        type: \"solid\",\n        color: this._getColor(patternFillNode, \"fgColor\")\n      };\n    }\n\n    if (patternType) {\n      return {\n        type: \"pattern\",\n        pattern: patternType,\n        foreground: this._getColor(patternFillNode, \"fgColor\"),\n        background: this._getColor(patternFillNode, \"bgColor\")\n      };\n    }\n\n    if (gradientFillNode) {\n      const gradientType = gradientFillNode.attributes.type || \"linear\";\n      const fill = {\n        type: \"gradient\",\n        gradientType,\n        stops: _.map(gradientFillNode.children, stop => ({\n          position: stop.attributes.position,\n          color: this._getColor(stop, \"color\")\n        }))\n      };\n\n      if (gradientType === \"linear\") {\n        fill.angle = gradientFillNode.attributes.degree;\n      } else {\n        fill.left = gradientFillNode.attributes.left;\n        fill.right = gradientFillNode.attributes.right;\n        fill.top = gradientFillNode.attributes.top;\n        fill.bottom = gradientFillNode.attributes.bottom;\n      }\n\n      return fill;\n    }\n  }\n\n  _set_fill(fill) {\n    this._fillNode.children = []; // No fill\n\n    if (_.isNil(fill)) return; // Pattern fill\n\n    if (fill.type === \"pattern\") {\n      const patternFill = {\n        name: 'patternFill',\n        attributes: {\n          patternType: fill.pattern\n        },\n        children: []\n      };\n\n      this._fillNode.children.push(patternFill);\n\n      this._setColor(patternFill, \"fgColor\", fill.foreground);\n\n      this._setColor(patternFill, \"bgColor\", fill.background);\n\n      return;\n    } // Gradient fill\n\n\n    if (fill.type === \"gradient\") {\n      const gradientFill = {\n        name: 'gradientFill',\n        attributes: {},\n        children: []\n      };\n\n      this._fillNode.children.push(gradientFill);\n\n      xmlq.setAttributes(gradientFill, {\n        type: fill.gradientType === \"path\" ? \"path\" : undefined,\n        left: fill.left,\n        right: fill.right,\n        top: fill.top,\n        bottom: fill.bottom,\n        degree: fill.angle\n      });\n\n      _.forEach(fill.stops, (fillStop, i) => {\n        const stop = {\n          name: 'stop',\n          attributes: {\n            position: fillStop.position\n          },\n          children: []\n        };\n        gradientFill.children.push(stop);\n\n        this._setColor(stop, 'color', fillStop.color);\n      });\n\n      return;\n    } // Solid fill (really a pattern fill with a solid pattern type).\n\n\n    if (!_.isObject(fill)) fill = {\n      type: \"solid\",\n      color: fill\n    };else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = {\n      color: fill\n    };\n    const patternFill = {\n      name: 'patternFill',\n      attributes: {\n        patternType: 'solid'\n      }\n    };\n\n    this._fillNode.children.push(patternFill);\n\n    this._setColor(patternFill, \"fgColor\", fill.color);\n  }\n\n  _getBorder() {\n    const result = {};\n    [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n      const sideNode = xmlq.findChild(this._borderNode, side);\n      const sideResult = {};\n      const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n      if (style) sideResult.style = style;\n\n      const color = this._getColor(sideNode, 'color');\n\n      if (color) sideResult.color = color;\n\n      if (side === \"diagonal\") {\n        const up = this._borderNode.attributes.diagonalUp;\n        const down = this._borderNode.attributes.diagonalDown;\n        let direction;\n        if (up && down) direction = \"both\";else if (up) direction = \"up\";else if (down) direction = \"down\";\n        if (direction) sideResult.direction = direction;\n      }\n\n      if (!_.isEmpty(sideResult)) result[side] = sideResult;\n    });\n    return result;\n  }\n\n  _setBorder(settings) {\n    _.forOwn(settings, (setting, side) => {\n      if (typeof setting === \"boolean\") {\n        setting = {\n          style: setting ? \"thin\" : null\n        };\n      } else if (typeof setting === \"string\") {\n        setting = {\n          style: setting\n        };\n      } else if (setting === null || setting === undefined) {\n        setting = {\n          style: null,\n          color: null,\n          direction: null\n        };\n      }\n\n      if (setting.hasOwnProperty(\"style\")) {\n        xmlq.setChildAttributes(this._borderNode, side, {\n          style: setting.style\n        });\n      }\n\n      if (setting.hasOwnProperty(\"color\")) {\n        const sideNode = xmlq.findChild(this._borderNode, side);\n\n        this._setColor(sideNode, \"color\", setting.color);\n      }\n\n      if (side === \"diagonal\") {\n        xmlq.setAttributes(this._borderNode, {\n          diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n          diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n        });\n      }\n    });\n  }\n\n  _get_border() {\n    return this._getBorder();\n  }\n\n  _set_border(settings) {\n    if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n      settings = _.defaults(settings, {\n        left: null,\n        right: null,\n        top: null,\n        bottom: null,\n        diagonal: null\n      });\n\n      this._setBorder(settings);\n    } else {\n      this._setBorder({\n        left: settings,\n        right: settings,\n        top: settings,\n        bottom: settings\n      });\n    }\n  }\n\n  _get_borderColor() {\n    return _.mapValues(this._getBorder(), value => value.color);\n  }\n\n  _set_borderColor(color) {\n    if (_.isObject(color)) {\n      this._setBorder(_.mapValues(color, color => ({\n        color\n      })));\n    } else {\n      this._setBorder({\n        left: {\n          color\n        },\n        right: {\n          color\n        },\n        top: {\n          color\n        },\n        bottom: {\n          color\n        },\n        diagonal: {\n          color\n        }\n      });\n    }\n  }\n\n  _get_borderStyle() {\n    return _.mapValues(this._getBorder(), value => value.style);\n  }\n\n  _set_borderStyle(style) {\n    if (_.isObject(style)) {\n      this._setBorder(_.mapValues(style, style => ({\n        style\n      })));\n    } else {\n      this._setBorder({\n        left: {\n          style\n        },\n        right: {\n          style\n        },\n        top: {\n          style\n        },\n        bottom: {\n          style\n        }\n      });\n    }\n  }\n\n  _get_diagonalBorderDirection() {\n    const border = this._getBorder().diagonal;\n\n    return border && border.direction;\n  }\n\n  _set_diagonalBorderDirection(direction) {\n    this._setBorder({\n      diagonal: {\n        direction\n      }\n    });\n  }\n\n  _get_numberFormat() {\n    const numFmtId = this._xfNode.attributes.numFmtId || 0;\n    return this._styleSheet.getNumberFormatCode(numFmtId);\n  }\n\n  _set_numberFormat(formatCode) {\n    this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n  }\n\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n  Style.prototype[`_get_${side}Border`] = function () {\n    return this._getBorder()[side];\n  };\n\n  Style.prototype[`_set_${side}Border`] = function (settings) {\n    this._setBorder({\n      [side]: settings\n    });\n  };\n\n  Style.prototype[`_get_${side}BorderColor`] = function () {\n    const border = this._getBorder()[side];\n\n    return border && border.color;\n  };\n\n  Style.prototype[`_set_${side}BorderColor`] = function (color) {\n    this._setBorder({\n      [side]: {\n        color\n      }\n    });\n  };\n\n  Style.prototype[`_get_${side}BorderStyle`] = function () {\n    const border = this._getBorder()[side];\n\n    return border && border.style;\n  };\n\n  Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n    this._setBorder({\n      [side]: {\n        style\n      }\n    });\n  };\n}); // IE doesn't support function names so explicitly set it.\n\nif (!Style.name) Style.name = \"Style\";\nmodule.exports = Style;","map":{"version":3,"names":["ArgHandler","require","_","xmlq","colorIndexes","Style","constructor","styleSheet","id","xfNode","fontNode","fillNode","borderNode","_styleSheet","_id","_xfNode","_fontNode","_fillNode","_borderNode","style","case","name","getterName","Error","value","setterName","handle","arguments","_getColor","node","child","findChild","attributes","color","hasOwnProperty","rgb","theme","indexed","tint","isEmpty","_setColor","setChildAttributes","toUpperCase","removeChildIfEmpty","_get_bold","hasChild","_set_bold","bold","appendChildIfNotFound","removeChild","_get_italic","_set_italic","italic","_get_underline","uNode","val","_set_underline","underline","setAttributes","_get_strikethrough","_set_strikethrough","strikethrough","_getFontVerticalAlignment","getChildAttribute","_setFontVerticalAlignment","alignment","_get_subscript","_set_subscript","subscript","_get_superscript","_set_superscript","superscript","_get_fontSize","_set_fontSize","size","_get_fontFamily","_set_fontFamily","family","_get_fontGenericFamily","_set_fontGenericFamily","genericFamily","_get_fontColor","_set_fontColor","_get_fontScheme","_set_fontScheme","scheme","_get_horizontalAlignment","_set_horizontalAlignment","horizontal","_get_justifyLastLine","_set_justifyLastLine","justifyLastLine","_get_indent","_set_indent","indent","_get_verticalAlignment","_set_verticalAlignment","vertical","_get_wrapText","_set_wrapText","wrapText","_get_shrinkToFit","_set_shrinkToFit","shrinkToFit","_get_textDirection","readingOrder","_set_textDirection","textDirection","_getTextRotation","_setTextRotation","textRotation","_get_textRotation","_set_textRotation","_get_angleTextCounterclockwise","_set_angleTextCounterclockwise","_get_angleTextClockwise","_set_angleTextClockwise","_get_rotateTextUp","_set_rotateTextUp","_get_rotateTextDown","_set_rotateTextDown","_get_verticalText","_set_verticalText","_get_fill","patternFillNode","gradientFillNode","patternType","type","pattern","foreground","background","gradientType","fill","stops","map","children","stop","position","angle","degree","left","right","top","bottom","_set_fill","isNil","patternFill","push","gradientFill","undefined","forEach","fillStop","i","isObject","_getBorder","result","side","sideNode","sideResult","up","diagonalUp","down","diagonalDown","direction","_setBorder","settings","forOwn","setting","_get_border","_set_border","defaults","diagonal","_get_borderColor","mapValues","_set_borderColor","_get_borderStyle","_set_borderStyle","_get_diagonalBorderDirection","border","_set_diagonalBorderDirection","_get_numberFormat","numFmtId","getNumberFormatCode","_set_numberFormat","formatCode","getNumberFormatId","prototype","module","exports"],"sources":["/Users/stichtinghelden/Documents/GitHub/patient_0_eng/patient0eng/node_modules/xlsx-populate/lib/Style.js"],"sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n    /**\n     * Creates a new instance of _Style.\n     * @constructor\n     * @param {StyleSheet} styleSheet - The styleSheet.\n     * @param {number} id - The style ID.\n     * @param {{}} xfNode - The xf node.\n     * @param {{}} fontNode - The font node.\n     * @param {{}} fillNode - The fill node.\n     * @param {{}} borderNode - The border node.\n     */\n    constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n        this._styleSheet = styleSheet;\n        this._id = id;\n        this._xfNode = xfNode;\n        this._fontNode = fontNode;\n        this._fillNode = fillNode;\n        this._borderNode = borderNode;\n    }\n\n    /**\n     * Gets the style ID.\n     * @returns {number} The ID.\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n    style() {\n        return new ArgHandler(\"_Style.style\")\n            .case('string', name => {\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case(['string', '*'], (name, value) => {\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                this[setterName](value);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'name', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n\n    _get_horizontalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n\n    _set_horizontalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { horizontal: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_justifyLastLine() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n\n    _set_justifyLastLine(justifyLastLine) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { justifyLastLine: justifyLastLine ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_indent() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n\n    _set_indent(indent) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { indent });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_verticalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n\n    _set_verticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { vertical: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_wrapText() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n\n    _set_wrapText(wrapText) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { wrapText: wrapText ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_shrinkToFit() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n\n    _set_shrinkToFit(shrinkToFit) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { shrinkToFit: shrinkToFit ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textDirection() {\n        const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n        if (readingOrder === 1) return \"left-to-right\";\n        if (readingOrder === 2) return \"right-to-left\";\n        return readingOrder;\n    }\n\n    _set_textDirection(textDirection) {\n        let readingOrder;\n        if (textDirection === \"left-to-right\") readingOrder = 1;\n        else if (textDirection === \"right-to-left\") readingOrder = 2;\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { readingOrder });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _getTextRotation() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n\n    _setTextRotation(textRotation) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { textRotation });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textRotation() {\n        let textRotation = this._getTextRotation();\n\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation > 90) textRotation = 90 - textRotation;\n        return textRotation;\n    }\n\n    _set_textRotation(textRotation) {\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation < 0) textRotation = 90 - textRotation;\n        this._setTextRotation(textRotation);\n    }\n\n    _get_angleTextCounterclockwise() {\n        return this._getTextRotation() === 45;\n    }\n\n    _set_angleTextCounterclockwise(value) {\n        this._setTextRotation(value ? 45 : null);\n    }\n\n    _get_angleTextClockwise() {\n        return this._getTextRotation() === 135;\n    }\n\n    _set_angleTextClockwise(value) {\n        this._setTextRotation(value ? 135 : null);\n    }\n\n    _get_rotateTextUp() {\n        return this._getTextRotation() === 90;\n    }\n\n    _set_rotateTextUp(value) {\n        this._setTextRotation(value ? 90 : null);\n    }\n\n    _get_rotateTextDown() {\n        return this._getTextRotation() === 180;\n    }\n\n    _set_rotateTextDown(value) {\n        this._setTextRotation(value ? 180 : null);\n    }\n\n    _get_verticalText() {\n        return this._getTextRotation() === 255;\n    }\n\n    _set_verticalText(value) {\n        this._setTextRotation(value ? 255 : null);\n    }\n\n    _get_fill() {\n        const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill');// jq.get(this._fillNode, \"patternFill[0]\");\n        const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill');// jq.get(this._fillNode, \"gradientFill[0]\");\n        const patternType = patternFillNode && patternFillNode.attributes.patternType;// jq.get(patternFillNode, \"$.patternType\");\n\n        if (patternType === \"solid\") {\n            return {\n                type: \"solid\",\n                color: this._getColor(patternFillNode, \"fgColor\")\n            };\n        }\n\n        if (patternType) {\n            return {\n                type: \"pattern\",\n                pattern: patternType,\n                foreground: this._getColor(patternFillNode, \"fgColor\"),\n                background: this._getColor(patternFillNode, \"bgColor\")\n            };\n        }\n\n        if (gradientFillNode) {\n            const gradientType = gradientFillNode.attributes.type || \"linear\";\n            const fill = {\n                type: \"gradient\",\n                gradientType,\n                stops: _.map(gradientFillNode.children, stop => ({\n                    position: stop.attributes.position,\n                    color: this._getColor(stop, \"color\")\n                }))\n            };\n\n            if (gradientType === \"linear\") {\n                fill.angle = gradientFillNode.attributes.degree;\n            } else {\n                fill.left = gradientFillNode.attributes.left;\n                fill.right = gradientFillNode.attributes.right;\n                fill.top = gradientFillNode.attributes.top;\n                fill.bottom = gradientFillNode.attributes.bottom;\n            }\n\n            return fill;\n        }\n    }\n\n    _set_fill(fill) {\n        this._fillNode.children = [];\n\n        // No fill\n        if (_.isNil(fill)) return;\n\n        // Pattern fill\n        if (fill.type === \"pattern\") {\n            const patternFill = {\n                name: 'patternFill',\n                attributes: { patternType: fill.pattern },\n                children: []\n            };\n            this._fillNode.children.push(patternFill);\n            this._setColor(patternFill, \"fgColor\", fill.foreground);\n            this._setColor(patternFill, \"bgColor\", fill.background);\n            return;\n        }\n\n        // Gradient fill\n        if (fill.type === \"gradient\") {\n            const gradientFill = { name: 'gradientFill', attributes: {}, children: [] };\n            this._fillNode.children.push(gradientFill);\n            xmlq.setAttributes(gradientFill, {\n                type: fill.gradientType === \"path\" ? \"path\" : undefined,\n                left: fill.left,\n                right: fill.right,\n                top: fill.top,\n                bottom: fill.bottom,\n                degree: fill.angle\n            });\n\n            _.forEach(fill.stops, (fillStop, i) => {\n                const stop = {\n                    name: 'stop',\n                    attributes: { position: fillStop.position },\n                    children: []\n                };\n                gradientFill.children.push(stop);\n                this._setColor(stop, 'color', fillStop.color);\n            });\n\n            return;\n        }\n\n        // Solid fill (really a pattern fill with a solid pattern type).\n        if (!_.isObject(fill)) fill = { type: \"solid\", color: fill };\n        else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = { color: fill };\n\n        const patternFill = {\n            name: 'patternFill',\n            attributes: { patternType: 'solid' }\n        };\n        this._fillNode.children.push(patternFill);\n        this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n\n    _getBorder() {\n        const result = {};\n        [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n            const sideNode = xmlq.findChild(this._borderNode, side);\n            const sideResult = {};\n\n            const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n            if (style) sideResult.style = style;\n            const color = this._getColor(sideNode, 'color');\n            if (color) sideResult.color = color;\n\n            if (side === \"diagonal\") {\n                const up = this._borderNode.attributes.diagonalUp;\n                const down = this._borderNode.attributes.diagonalDown;\n                let direction;\n                if (up && down) direction = \"both\";\n                else if (up) direction = \"up\";\n                else if (down) direction = \"down\";\n                if (direction) sideResult.direction = direction;\n            }\n\n            if (!_.isEmpty(sideResult)) result[side] = sideResult;\n        });\n\n        return result;\n    }\n\n    _setBorder(settings) {\n        _.forOwn(settings, (setting, side) => {\n            if (typeof setting === \"boolean\") {\n                setting = { style: setting ? \"thin\" : null };\n            } else if (typeof setting === \"string\") {\n                setting = { style: setting };\n            } else if (setting === null || setting === undefined) {\n                setting = { style: null, color: null, direction: null };\n            }\n\n            if (setting.hasOwnProperty(\"style\")) {\n                xmlq.setChildAttributes(this._borderNode, side, { style: setting.style });\n            }\n\n            if (setting.hasOwnProperty(\"color\")) {\n                const sideNode = xmlq.findChild(this._borderNode, side);\n                this._setColor(sideNode, \"color\", setting.color);\n            }\n\n            if (side === \"diagonal\") {\n                xmlq.setAttributes(this._borderNode, {\n                    diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n                    diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n                });\n            }\n        });\n    }\n\n    _get_border() {\n        return this._getBorder();\n    }\n\n    _set_border(settings) {\n        if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n            settings = _.defaults(settings, {\n                left: null,\n                right: null,\n                top: null,\n                bottom: null,\n                diagonal: null\n            });\n            this._setBorder(settings);\n        } else {\n            this._setBorder({\n                left: settings,\n                right: settings,\n                top: settings,\n                bottom: settings\n            });\n        }\n    }\n\n    _get_borderColor() {\n        return _.mapValues(this._getBorder(), value => value.color);\n    }\n\n    _set_borderColor(color) {\n        if (_.isObject(color)) {\n            this._setBorder(_.mapValues(color, color => ({ color })));\n        } else {\n            this._setBorder({\n                left: { color },\n                right: { color },\n                top: { color },\n                bottom: { color },\n                diagonal: { color }\n            });\n        }\n    }\n\n    _get_borderStyle() {\n        return _.mapValues(this._getBorder(), value => value.style);\n    }\n\n    _set_borderStyle(style) {\n        if (_.isObject(style)) {\n            this._setBorder(_.mapValues(style, style => ({ style })));\n        } else {\n            this._setBorder({\n                left: { style },\n                right: { style },\n                top: { style },\n                bottom: { style }\n            });\n        }\n    }\n\n    _get_diagonalBorderDirection() {\n        const border = this._getBorder().diagonal;\n        return border && border.direction;\n    }\n\n    _set_diagonalBorderDirection(direction) {\n        this._setBorder({ diagonal: { direction } });\n    }\n\n    _get_numberFormat() {\n        const numFmtId = this._xfNode.attributes.numFmtId || 0;\n        return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n\n    _set_numberFormat(formatCode) {\n        this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n    Style.prototype[`_get_${side}Border`] = function () {\n        return this._getBorder()[side];\n    };\n\n    Style.prototype[`_set_${side}Border`] = function (settings) {\n        this._setBorder({ [side]: settings });\n    };\n\n    Style.prototype[`_get_${side}BorderColor`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.color;\n    };\n\n    Style.prototype[`_set_${side}BorderColor`] = function (color) {\n        this._setBorder({ [side]: { color } });\n    };\n\n    Style.prototype[`_get_${side}BorderStyle`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.style;\n    };\n\n    Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n        this._setBorder({ [side]: { style } });\n    };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\n\nmodule.exports = Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}