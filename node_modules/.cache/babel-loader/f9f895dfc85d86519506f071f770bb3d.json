{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n\nvar BitArray_1 = require(\"../../common/BitArray\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n\nvar QRCode_1 = require(\"./QRCode\");\n\nvar MaskUtil_1 = require(\"./MaskUtil\");\n\nvar WriterException_1 = require(\"../../WriterException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\n\n\nvar MatrixUtil =\n/** @class */\nfunction () {\n  function MatrixUtil() {// do nothing\n  } // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n  //\n  // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n  // with the ByteMatrix initialized all to zero.\n\n\n  MatrixUtil.clearMatrix = function (matrix) {\n    // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n    matrix.clear(\n    /*(byte) */\n\n    /*-1*/\n    255);\n  }; // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n  // success, store the result in \"matrix\" and return true.\n\n\n  MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern\n  /*int*/\n  , matrix) {\n    MatrixUtil.clearMatrix(matrix);\n    MatrixUtil.embedBasicPatterns(version, matrix); // Type information appear with any version.\n\n    MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix); // Version info appear if version >= 7.\n\n    MatrixUtil.maybeEmbedVersionInfo(version, matrix); // Data should be embedded at end.\n\n    MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n  }; // Embed basic patterns. On success, modify the matrix and return true.\n  // The basic patterns are:\n  // - Position detection patterns\n  // - Timing patterns\n  // - Dark dot at the left bottom corner\n  // - Position adjustment patterns, if need be\n\n\n  MatrixUtil.embedBasicPatterns = function (version, matrix) {\n    // Let's get started with embedding big squares at corners.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix); // Then, embed the dark dot at the left bottom corner.\n\n    MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix); // Position adjustment patterns appear if version >= 2.\n\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix); // Timing patterns should be embedded after position adj. patterns.\n\n    MatrixUtil.embedTimingPatterns(matrix);\n  }; // Embed type information. On success, modify the matrix.\n\n\n  MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern\n  /*int*/\n  , matrix) {\n    var typeInfoBits = new BitArray_1.default();\n    MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n\n    for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n      // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n      // \"typeInfoBits\".\n      var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i); // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n\n      var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n      var x1 = coordinates[0];\n      var y1 = coordinates[1];\n      matrix.setBoolean(x1, y1, bit);\n\n      if (i < 8) {\n        // Right top corner.\n        var x2 = matrix.getWidth() - i - 1;\n        var y2 = 8;\n        matrix.setBoolean(x2, y2, bit);\n      } else {\n        // Left bottom corner.\n        var x2 = 8;\n        var y2 = matrix.getHeight() - 7 + (i - 8);\n        matrix.setBoolean(x2, y2, bit);\n      }\n    }\n  }; // Embed version information if need be. On success, modify the matrix and return true.\n  // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n\n\n  MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n    if (version.getVersionNumber() < 7) {\n      // Version info is necessary if version >= 7.\n      return; // Don't need version info.\n    }\n\n    var versionInfoBits = new BitArray_1.default();\n    MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n    var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n\n    for (var i = 0; i < 6; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        // Place bits in LSB (least significant bit) to MSB order.\n        var bit = versionInfoBits.get(bitIndex);\n        bitIndex--; // Left bottom corner.\n\n        matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit); // Right bottom corner.\n\n        matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n      }\n    }\n  }; // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n  // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n  // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n\n\n  MatrixUtil.embedDataBits = function (dataBits, maskPattern\n  /*int*/\n  , matrix) {\n    var bitIndex = 0;\n    var direction = -1; // Start from the right bottom cell.\n\n    var x = matrix.getWidth() - 1;\n    var y = matrix.getHeight() - 1;\n\n    while (x > 0) {\n      // Skip the vertical timing pattern.\n      if (x === 6) {\n        x -= 1;\n      }\n\n      while (y >= 0 && y < matrix.getHeight()) {\n        for (var i = 0; i < 2; ++i) {\n          var xx = x - i; // Skip the cell if it's not empty.\n\n          if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n            continue;\n          }\n\n          var bit = void 0;\n\n          if (bitIndex < dataBits.getSize()) {\n            bit = dataBits.get(bitIndex);\n            ++bitIndex;\n          } else {\n            // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n            // in 8.4.9 of JISX0510:2004 (p. 24).\n            bit = false;\n          } // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n\n\n          if (maskPattern !== 255 && MaskUtil_1.default.getDataMaskBit(maskPattern, xx, y)) {\n            bit = !bit;\n          }\n\n          matrix.setBoolean(xx, y, bit);\n        }\n\n        y += direction;\n      }\n\n      direction = -direction; // Reverse the direction.\n\n      y += direction;\n      x -= 2; // Move to the left.\n    } // All bits should be consumed.\n\n\n    if (bitIndex !== dataBits.getSize()) {\n      throw new WriterException_1.default('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n    }\n  }; // Return the position of the most significant bit set (one: to) in the \"value\". The most\n  // significant bit is position 32. If there is no bit set, return 0. Examples:\n  // - findMSBSet(0) => 0\n  // - findMSBSet(1) => 1\n  // - findMSBSet(255) => 8\n\n\n  MatrixUtil.findMSBSet = function (value\n  /*int*/\n  ) {\n    return 32 - Integer_1.default.numberOfLeadingZeros(value);\n  }; // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n  // code is used for encoding type information and version information.\n  // Example: Calculation of version information of 7.\n  // f(x) is created from 7.\n  //   - 7 = 000111 in 6 bits\n  //   - f(x) = x^2 + x^1 + x^0\n  // g(x) is given by the standard (p. 67)\n  //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n  // Multiply f(x) by x^(18 - 6)\n  //   - f'(x) = f(x) * x^(18 - 6)\n  //   - f'(x) = x^14 + x^13 + x^12\n  // Calculate the remainder of f'(x) / g(x)\n  //         x^2\n  //         __________________________________________________\n  //   g(x) )x^14 + x^13 + x^12\n  //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n  //         --------------------------------------------------\n  //                              x^11 + x^10 + x^7 + x^4 + x^2\n  //\n  // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n  // Encode it in binary: 110010010100\n  // The return value is 0xc94 (1100 1001 0100)\n  //\n  // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n  // operations. We don't care if coefficients are positive or negative.\n\n\n  MatrixUtil.calculateBCHCode = function (value\n  /*int*/\n  , poly\n  /*int*/\n  ) {\n    if (poly === 0) {\n      throw new IllegalArgumentException_1.default('0 polynomial');\n    } // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n    // from 13 to make it 12.\n\n\n    var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n    value <<= msbSetInPoly - 1; // Do the division business using exclusive-or operations.\n\n    while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n      value ^= poly << MatrixUtil.findMSBSet(value) - msbSetInPoly;\n    } // Now the \"value\" is the remainder (i.e. the BCH code)\n\n\n    return value;\n  }; // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n  // Encode error correction level and mask pattern. See 8.9 of\n  // JISX0510:2004 (p.45) for details.\n\n\n  MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern\n  /*int*/\n  , bits) {\n    if (!QRCode_1.default.isValidMaskPattern(maskPattern)) {\n      throw new WriterException_1.default('Invalid mask pattern');\n    }\n\n    var typeInfo = ecLevel.getBits() << 3 | maskPattern;\n    bits.appendBits(typeInfo, 5);\n    var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n    bits.appendBits(bchCode, 10);\n    var maskBits = new BitArray_1.default();\n    maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n    bits.xor(maskBits);\n\n    if (bits.getSize() !== 15) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  }; // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n  // See 8.10 of JISX0510:2004 (p.45) for details.\n\n\n  MatrixUtil.makeVersionInfoBits = function (version, bits) {\n    bits.appendBits(version.getVersionNumber(), 6);\n    var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n    bits.appendBits(bchCode, 12);\n\n    if (bits.getSize() !== 18) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  }; // Check if \"value\" is empty.\n\n\n  MatrixUtil.isEmpty = function (value\n  /*int*/\n  ) {\n    return value === 255; // -1\n  };\n\n  MatrixUtil.embedTimingPatterns = function (matrix) {\n    // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n    // separation patterns (1: size). Thus, 8 = 7 + 1.\n    for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n      var bit = (i + 1) % 2; // Horizontal line.\n\n      if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n        matrix.setNumber(i, 6, bit);\n      } // Vertical line.\n\n\n      if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n        matrix.setNumber(6, i, bit);\n      }\n    }\n  }; // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n\n\n  MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n    if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n      throw new WriterException_1.default();\n    }\n\n    matrix.setNumber(8, matrix.getHeight() - 8, 1);\n  };\n\n  MatrixUtil.embedHorizontalSeparationPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var x = 0; x < 8; ++x) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n        throw new WriterException_1.default();\n      }\n\n      matrix.setNumber(xStart + x, yStart, 0);\n    }\n  };\n\n  MatrixUtil.embedVerticalSeparationPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 7; ++y) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n        throw new WriterException_1.default();\n      }\n\n      matrix.setNumber(xStart, yStart + y, 0);\n    }\n  };\n\n  MatrixUtil.embedPositionAdjustmentPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 5; ++y) {\n      var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n\n      for (var x = 0; x < 5; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n\n  MatrixUtil.embedPositionDetectionPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 7; ++y) {\n      var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n\n      for (var x = 0; x < 7; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  }; // Embed position detection patterns and surrounding vertical/horizontal separators.\n\n\n  MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n    // Embed three big squares at corners.\n    var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length; // Left top corner.\n\n    MatrixUtil.embedPositionDetectionPattern(0, 0, matrix); // Right top corner.\n\n    MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix); // Left bottom corner.\n\n    MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix); // Embed horizontal separation patterns around the squares.\n\n    var hspWidth = 8; // Left top corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix); // Right top corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix); // Left bottom corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix); // Embed vertical separation patterns around the squares.\n\n    var vspSize = 7; // Left top corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix); // Right top corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix); // Left bottom corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n  }; // Embed position adjustment patterns if need be.\n\n\n  MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n    if (version.getVersionNumber() < 2) {\n      // The patterns appear if version >= 2\n      return;\n    }\n\n    var index = version.getVersionNumber() - 1;\n    var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n\n    for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n      var y = coordinates[i];\n\n      if (y >= 0) {\n        for (var j = 0; j !== length_1; j++) {\n          var x = coordinates[j];\n\n          if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n            // If the cell is unset, we embed the position adjustment pattern here.\n            // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n            // left top corner.\n            MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n          }\n        }\n      }\n    }\n  };\n\n  MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1, 1, 1])]);\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1])]); // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([Int32Array.from([-1, -1, -1, -1, -1, -1, -1]), Int32Array.from([6, 18, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, -1, -1, -1, -1, -1]), Int32Array.from([6, 26, -1, -1, -1, -1, -1]), Int32Array.from([6, 30, -1, -1, -1, -1, -1]), Int32Array.from([6, 34, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, 38, -1, -1, -1, -1]), Int32Array.from([6, 24, 42, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, -1, -1, -1, -1]), Int32Array.from([6, 28, 50, -1, -1, -1, -1]), Int32Array.from([6, 30, 54, -1, -1, -1, -1]), Int32Array.from([6, 32, 58, -1, -1, -1, -1]), Int32Array.from([6, 34, 62, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, 66, -1, -1, -1]), Int32Array.from([6, 26, 48, 70, -1, -1, -1]), Int32Array.from([6, 26, 50, 74, -1, -1, -1]), Int32Array.from([6, 30, 54, 78, -1, -1, -1]), Int32Array.from([6, 30, 56, 82, -1, -1, -1]), Int32Array.from([6, 30, 58, 86, -1, -1, -1]), Int32Array.from([6, 34, 62, 90, -1, -1, -1]), Int32Array.from([6, 28, 50, 72, 94, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, -1, -1]), Int32Array.from([6, 30, 54, 78, 102, -1, -1]), Int32Array.from([6, 28, 54, 80, 106, -1, -1]), Int32Array.from([6, 32, 58, 84, 110, -1, -1]), Int32Array.from([6, 30, 58, 86, 114, -1, -1]), Int32Array.from([6, 34, 62, 90, 118, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, 122, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, -1]), Int32Array.from([6, 26, 52, 78, 104, 130, -1]), Int32Array.from([6, 30, 56, 82, 108, 134, -1]), Int32Array.from([6, 34, 60, 86, 112, 138, -1]), Int32Array.from([6, 30, 58, 86, 114, 142, -1]), Int32Array.from([6, 34, 62, 90, 118, 146, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, 150]), Int32Array.from([6, 24, 50, 76, 102, 128, 154]), Int32Array.from([6, 28, 54, 80, 106, 132, 158]), Int32Array.from([6, 32, 58, 84, 110, 136, 162]), Int32Array.from([6, 26, 54, 82, 110, 138, 166]), Int32Array.from([6, 30, 58, 86, 114, 142, 170])]); // Type info cells at the left top corner.\n\n  MatrixUtil.TYPE_INFO_COORDINATES = Array.from([Int32Array.from([8, 0]), Int32Array.from([8, 1]), Int32Array.from([8, 2]), Int32Array.from([8, 3]), Int32Array.from([8, 4]), Int32Array.from([8, 5]), Int32Array.from([8, 7]), Int32Array.from([8, 8]), Int32Array.from([7, 8]), Int32Array.from([5, 8]), Int32Array.from([4, 8]), Int32Array.from([3, 8]), Int32Array.from([2, 8]), Int32Array.from([1, 8]), Int32Array.from([0, 8])]); // From Appendix D in JISX0510:2004 (p. 67)\n\n  MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n  // From Appendix C in JISX0510:2004 (p.65).\n\n  MatrixUtil.TYPE_INFO_POLY = 0x537;\n  MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n  return MatrixUtil;\n}();\n\nexports.default = MatrixUtil;","map":{"version":3,"sources":["../../../../src/core/qrcode/encoder/MatrixUtil.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.encoder {*/\nvar BitArray_1 = require(\"../../common/BitArray\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar QRCode_1 = require(\"./QRCode\");\nvar MaskUtil_1 = require(\"./MaskUtil\");\nvar WriterException_1 = require(\"../../WriterException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\nvar MatrixUtil = /** @class */ (function () {\n    function MatrixUtil() {\n        // do nothing\n    }\n    // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n    //\n    // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n    // with the ByteMatrix initialized all to zero.\n    MatrixUtil.clearMatrix = function (matrix) {\n        // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n        matrix.clear(/*(byte) */ /*-1*/ 255);\n    };\n    // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n    // success, store the result in \"matrix\" and return true.\n    MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\n        MatrixUtil.clearMatrix(matrix);\n        MatrixUtil.embedBasicPatterns(version, matrix);\n        // Type information appear with any version.\n        MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\n        // Version info appear if version >= 7.\n        MatrixUtil.maybeEmbedVersionInfo(version, matrix);\n        // Data should be embedded at end.\n        MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n    };\n    // Embed basic patterns. On success, modify the matrix and return true.\n    // The basic patterns are:\n    // - Position detection patterns\n    // - Timing patterns\n    // - Dark dot at the left bottom corner\n    // - Position adjustment patterns, if need be\n    MatrixUtil.embedBasicPatterns = function (version, matrix) {\n        // Let's get started with embedding big squares at corners.\n        MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\n        // Then, embed the dark dot at the left bottom corner.\n        MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\n        // Position adjustment patterns appear if version >= 2.\n        MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\n        // Timing patterns should be embedded after position adj. patterns.\n        MatrixUtil.embedTimingPatterns(matrix);\n    };\n    // Embed type information. On success, modify the matrix.\n    MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern /*int*/, matrix) {\n        var typeInfoBits = new BitArray_1.default();\n        MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n        for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n            // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n            // \"typeInfoBits\".\n            var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\n            // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n            var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n            var x1 = coordinates[0];\n            var y1 = coordinates[1];\n            matrix.setBoolean(x1, y1, bit);\n            if (i < 8) {\n                // Right top corner.\n                var x2 = matrix.getWidth() - i - 1;\n                var y2 = 8;\n                matrix.setBoolean(x2, y2, bit);\n            }\n            else {\n                // Left bottom corner.\n                var x2 = 8;\n                var y2 = matrix.getHeight() - 7 + (i - 8);\n                matrix.setBoolean(x2, y2, bit);\n            }\n        }\n    };\n    // Embed version information if need be. On success, modify the matrix and return true.\n    // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n    MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n        if (version.getVersionNumber() < 7) { // Version info is necessary if version >= 7.\n            return; // Don't need version info.\n        }\n        var versionInfoBits = new BitArray_1.default();\n        MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n        var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n        for (var i = 0; i < 6; ++i) {\n            for (var j = 0; j < 3; ++j) {\n                // Place bits in LSB (least significant bit) to MSB order.\n                var bit = versionInfoBits.get(bitIndex);\n                bitIndex--;\n                // Left bottom corner.\n                matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\n                // Right bottom corner.\n                matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n            }\n        }\n    };\n    // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n    // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n    // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n    MatrixUtil.embedDataBits = function (dataBits, maskPattern /*int*/, matrix) {\n        var bitIndex = 0;\n        var direction = -1;\n        // Start from the right bottom cell.\n        var x = matrix.getWidth() - 1;\n        var y = matrix.getHeight() - 1;\n        while (x > 0) {\n            // Skip the vertical timing pattern.\n            if (x === 6) {\n                x -= 1;\n            }\n            while (y >= 0 && y < matrix.getHeight()) {\n                for (var i = 0; i < 2; ++i) {\n                    var xx = x - i;\n                    // Skip the cell if it's not empty.\n                    if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n                        continue;\n                    }\n                    var bit = void 0;\n                    if (bitIndex < dataBits.getSize()) {\n                        bit = dataBits.get(bitIndex);\n                        ++bitIndex;\n                    }\n                    else {\n                        // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n                        // in 8.4.9 of JISX0510:2004 (p. 24).\n                        bit = false;\n                    }\n                    // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n                    if (maskPattern !== 255 && MaskUtil_1.default.getDataMaskBit(maskPattern, xx, y)) {\n                        bit = !bit;\n                    }\n                    matrix.setBoolean(xx, y, bit);\n                }\n                y += direction;\n            }\n            direction = -direction; // Reverse the direction.\n            y += direction;\n            x -= 2; // Move to the left.\n        }\n        // All bits should be consumed.\n        if (bitIndex !== dataBits.getSize()) {\n            throw new WriterException_1.default('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n        }\n    };\n    // Return the position of the most significant bit set (one: to) in the \"value\". The most\n    // significant bit is position 32. If there is no bit set, return 0. Examples:\n    // - findMSBSet(0) => 0\n    // - findMSBSet(1) => 1\n    // - findMSBSet(255) => 8\n    MatrixUtil.findMSBSet = function (value /*int*/) {\n        return 32 - Integer_1.default.numberOfLeadingZeros(value);\n    };\n    // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n    // code is used for encoding type information and version information.\n    // Example: Calculation of version information of 7.\n    // f(x) is created from 7.\n    //   - 7 = 000111 in 6 bits\n    //   - f(x) = x^2 + x^1 + x^0\n    // g(x) is given by the standard (p. 67)\n    //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n    // Multiply f(x) by x^(18 - 6)\n    //   - f'(x) = f(x) * x^(18 - 6)\n    //   - f'(x) = x^14 + x^13 + x^12\n    // Calculate the remainder of f'(x) / g(x)\n    //         x^2\n    //         __________________________________________________\n    //   g(x) )x^14 + x^13 + x^12\n    //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n    //         --------------------------------------------------\n    //                              x^11 + x^10 + x^7 + x^4 + x^2\n    //\n    // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n    // Encode it in binary: 110010010100\n    // The return value is 0xc94 (1100 1001 0100)\n    //\n    // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n    // operations. We don't care if coefficients are positive or negative.\n    MatrixUtil.calculateBCHCode = function (value /*int*/, poly /*int*/) {\n        if (poly === 0) {\n            throw new IllegalArgumentException_1.default('0 polynomial');\n        }\n        // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n        // from 13 to make it 12.\n        var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n        value <<= msbSetInPoly - 1;\n        // Do the division business using exclusive-or operations.\n        while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n            value ^= poly << (MatrixUtil.findMSBSet(value) - msbSetInPoly);\n        }\n        // Now the \"value\" is the remainder (i.e. the BCH code)\n        return value;\n    };\n    // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n    // Encode error correction level and mask pattern. See 8.9 of\n    // JISX0510:2004 (p.45) for details.\n    MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern /*int*/, bits) {\n        if (!QRCode_1.default.isValidMaskPattern(maskPattern)) {\n            throw new WriterException_1.default('Invalid mask pattern');\n        }\n        var typeInfo = (ecLevel.getBits() << 3) | maskPattern;\n        bits.appendBits(typeInfo, 5);\n        var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n        bits.appendBits(bchCode, 10);\n        var maskBits = new BitArray_1.default();\n        maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n        bits.xor(maskBits);\n        if (bits.getSize() !== 15) { // Just in case.\n            throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n        }\n    };\n    // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n    // See 8.10 of JISX0510:2004 (p.45) for details.\n    MatrixUtil.makeVersionInfoBits = function (version, bits) {\n        bits.appendBits(version.getVersionNumber(), 6);\n        var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n        bits.appendBits(bchCode, 12);\n        if (bits.getSize() !== 18) { // Just in case.\n            throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n        }\n    };\n    // Check if \"value\" is empty.\n    MatrixUtil.isEmpty = function (value /*int*/) {\n        return value === 255; // -1\n    };\n    MatrixUtil.embedTimingPatterns = function (matrix) {\n        // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n        // separation patterns (1: size). Thus, 8 = 7 + 1.\n        for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n            var bit = (i + 1) % 2;\n            // Horizontal line.\n            if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n                matrix.setNumber(i, 6, bit);\n            }\n            // Vertical line.\n            if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n                matrix.setNumber(6, i, bit);\n            }\n        }\n    };\n    // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n    MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n        if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n            throw new WriterException_1.default();\n        }\n        matrix.setNumber(8, matrix.getHeight() - 8, 1);\n    };\n    MatrixUtil.embedHorizontalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var x = 0; x < 8; ++x) {\n            if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n                throw new WriterException_1.default();\n            }\n            matrix.setNumber(xStart + x, yStart, 0);\n        }\n    };\n    MatrixUtil.embedVerticalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 7; ++y) {\n            if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n                throw new WriterException_1.default();\n            }\n            matrix.setNumber(xStart, yStart + y, 0);\n        }\n    };\n    MatrixUtil.embedPositionAdjustmentPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 5; ++y) {\n            var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n            for (var x = 0; x < 5; ++x) {\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n            }\n        }\n    };\n    MatrixUtil.embedPositionDetectionPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 7; ++y) {\n            var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n            for (var x = 0; x < 7; ++x) {\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n            }\n        }\n    };\n    // Embed position detection patterns and surrounding vertical/horizontal separators.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n        // Embed three big squares at corners.\n        var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\n        // Left top corner.\n        MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\n        // Right top corner.\n        MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\n        // Embed horizontal separation patterns around the squares.\n        var hspWidth = 8;\n        // Left top corner.\n        MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\n        // Right top corner.\n        MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\n        // Embed vertical separation patterns around the squares.\n        var vspSize = 7;\n        // Left top corner.\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\n        // Right top corner.\n        MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n    };\n    // Embed position adjustment patterns if need be.\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n        if (version.getVersionNumber() < 2) { // The patterns appear if version >= 2\n            return;\n        }\n        var index = version.getVersionNumber() - 1;\n        var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n        for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n            var y = coordinates[i];\n            if (y >= 0) {\n                for (var j = 0; j !== length_1; j++) {\n                    var x = coordinates[j];\n                    if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n                        // If the cell is unset, we embed the position adjustment pattern here.\n                        // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n                        // left top corner.\n                        MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n                    }\n                }\n            }\n        }\n    };\n    MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n    ]);\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1]),\n    ]);\n    // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([\n        Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 18, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, 38, -1, -1, -1, -1]),\n        Int32Array.from([6, 24, 42, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, -1, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, -1, -1, -1, -1]),\n        Int32Array.from([6, 32, 58, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, 66, -1, -1, -1]),\n        Int32Array.from([6, 26, 48, 70, -1, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, -1, -1, -1]),\n        Int32Array.from([6, 30, 56, 82, -1, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, 72, 94, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, -1, -1]),\n        Int32Array.from([6, 28, 54, 80, 106, -1, -1]),\n        Int32Array.from([6, 32, 58, 84, 110, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, 122, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, -1]),\n        Int32Array.from([6, 26, 52, 78, 104, 130, -1]),\n        Int32Array.from([6, 30, 56, 82, 108, 134, -1]),\n        Int32Array.from([6, 34, 60, 86, 112, 138, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, 146, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, 150]),\n        Int32Array.from([6, 24, 50, 76, 102, 128, 154]),\n        Int32Array.from([6, 28, 54, 80, 106, 132, 158]),\n        Int32Array.from([6, 32, 58, 84, 110, 136, 162]),\n        Int32Array.from([6, 26, 54, 82, 110, 138, 166]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, 170]),\n    ]);\n    // Type info cells at the left top corner.\n    MatrixUtil.TYPE_INFO_COORDINATES = Array.from([\n        Int32Array.from([8, 0]),\n        Int32Array.from([8, 1]),\n        Int32Array.from([8, 2]),\n        Int32Array.from([8, 3]),\n        Int32Array.from([8, 4]),\n        Int32Array.from([8, 5]),\n        Int32Array.from([8, 7]),\n        Int32Array.from([8, 8]),\n        Int32Array.from([7, 8]),\n        Int32Array.from([5, 8]),\n        Int32Array.from([4, 8]),\n        Int32Array.from([3, 8]),\n        Int32Array.from([2, 8]),\n        Int32Array.from([1, 8]),\n        Int32Array.from([0, 8]),\n    ]);\n    // From Appendix D in JISX0510:2004 (p. 67)\n    MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n    // From Appendix C in JISX0510:2004 (p.65).\n    MatrixUtil.TYPE_INFO_POLY = 0x537;\n    MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n    return MatrixUtil;\n}());\nexports.default = MatrixUtil;\n//# sourceMappingURL=MatrixUtil.js.map"]},"metadata":{},"sourceType":"script"}