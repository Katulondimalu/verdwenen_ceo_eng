{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author Sean Owen\n */\n\n\nvar DataBlock =\n/** @class */\nfunction () {\n  function DataBlock(numDataCodewords\n  /*int*/\n  , codewords) {\n    this.numDataCodewords = numDataCodewords;\n    this.codewords = codewords;\n  }\n  /**\n   * <p>When QR Codes use multiple data blocks, they are actually interleaved.\n   * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n   * method will separate the data into original blocks.</p>\n   *\n   * @param rawCodewords bytes as read directly from the QR Code\n   * @param version version of the QR Code\n   * @param ecLevel error-correction level of the QR Code\n   * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n   *         QR Code\n   */\n\n\n  DataBlock.getDataBlocks = function (rawCodewords, version, ecLevel) {\n    var e_1, _a, e_2, _b;\n\n    if (rawCodewords.length !== version.getTotalCodewords()) {\n      throw new IllegalArgumentException_1.default();\n    } // Figure out the number and size of data blocks used by this version and\n    // error correction level\n\n\n    var ecBlocks = version.getECBlocksForLevel(ecLevel); // First count the total number of data blocks\n\n    var totalBlocks = 0;\n    var ecBlockArray = ecBlocks.getECBlocks();\n\n    try {\n      for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n        var ecBlock = ecBlockArray_1_1.value;\n        totalBlocks += ecBlock.getCount();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // Now establish DataBlocks of the appropriate size and number of data codewords\n\n\n    var result = new Array(totalBlocks);\n    var numResultBlocks = 0;\n\n    try {\n      for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n        var ecBlock = ecBlockArray_2_1.value;\n\n        for (var i = 0; i < ecBlock.getCount(); i++) {\n          var numDataCodewords = ecBlock.getDataCodewords();\n          var numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n          result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // All blocks have the same amount of data, except that the last n\n    // (where n may be 0) have 1 more byte. Figure out where these start.\n\n\n    var shorterBlocksTotalCodewords = result[0].codewords.length;\n    var longerBlocksStartAt = result.length - 1; // TYPESCRIPTPORT: check length is correct here\n\n    while (longerBlocksStartAt >= 0) {\n      var numCodewords = result[longerBlocksStartAt].codewords.length;\n\n      if (numCodewords === shorterBlocksTotalCodewords) {\n        break;\n      }\n\n      longerBlocksStartAt--;\n    }\n\n    longerBlocksStartAt++;\n    var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock(); // The last elements of result may be 1 element longer\n    // first fill out as many elements as all of them have\n\n    var rawCodewordsOffset = 0;\n\n    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n      }\n    } // Fill out the last data block in the longer ones\n\n\n    for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\n      result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n    } // Now add in error correction blocks\n\n\n    var max = result[0].codewords.length;\n\n    for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        var iOffset = j < longerBlocksStartAt ? i : i + 1;\n        result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\n\n    return result;\n  };\n\n  DataBlock.prototype.getNumDataCodewords = function () {\n    return this.numDataCodewords;\n  };\n\n  DataBlock.prototype.getCodewords = function () {\n    return this.codewords;\n  };\n\n  return DataBlock;\n}();\n\nexports.default = DataBlock;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/DataBlock.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author Sean Owen\n */\nvar DataBlock = /** @class */ (function () {\n    function DataBlock(numDataCodewords /*int*/, codewords) {\n        this.numDataCodewords = numDataCodewords;\n        this.codewords = codewords;\n    }\n    /**\n     * <p>When QR Codes use multiple data blocks, they are actually interleaved.\n     * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n     * method will separate the data into original blocks.</p>\n     *\n     * @param rawCodewords bytes as read directly from the QR Code\n     * @param version version of the QR Code\n     * @param ecLevel error-correction level of the QR Code\n     * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n     *         QR Code\n     */\n    DataBlock.getDataBlocks = function (rawCodewords, version, ecLevel) {\n        var e_1, _a, e_2, _b;\n        if (rawCodewords.length !== version.getTotalCodewords()) {\n            throw new IllegalArgumentException_1.default();\n        }\n        // Figure out the number and size of data blocks used by this version and\n        // error correction level\n        var ecBlocks = version.getECBlocksForLevel(ecLevel);\n        // First count the total number of data blocks\n        var totalBlocks = 0;\n        var ecBlockArray = ecBlocks.getECBlocks();\n        try {\n            for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n                var ecBlock = ecBlockArray_1_1.value;\n                totalBlocks += ecBlock.getCount();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Now establish DataBlocks of the appropriate size and number of data codewords\n        var result = new Array(totalBlocks);\n        var numResultBlocks = 0;\n        try {\n            for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n                var ecBlock = ecBlockArray_2_1.value;\n                for (var i = 0; i < ecBlock.getCount(); i++) {\n                    var numDataCodewords = ecBlock.getDataCodewords();\n                    var numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // All blocks have the same amount of data, except that the last n\n        // (where n may be 0) have 1 more byte. Figure out where these start.\n        var shorterBlocksTotalCodewords = result[0].codewords.length;\n        var longerBlocksStartAt = result.length - 1;\n        // TYPESCRIPTPORT: check length is correct here\n        while (longerBlocksStartAt >= 0) {\n            var numCodewords = result[longerBlocksStartAt].codewords.length;\n            if (numCodewords === shorterBlocksTotalCodewords) {\n                break;\n            }\n            longerBlocksStartAt--;\n        }\n        longerBlocksStartAt++;\n        var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\n        // The last elements of result may be 1 element longer\n        // first fill out as many elements as all of them have\n        var rawCodewordsOffset = 0;\n        for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        // Fill out the last data block in the longer ones\n        for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\n            result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n        }\n        // Now add in error correction blocks\n        var max = result[0].codewords.length;\n        for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                var iOffset = j < longerBlocksStartAt ? i : i + 1;\n                result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        return result;\n    };\n    DataBlock.prototype.getNumDataCodewords = function () {\n        return this.numDataCodewords;\n    };\n    DataBlock.prototype.getCodewords = function () {\n        return this.codewords;\n    };\n    return DataBlock;\n}());\nexports.default = DataBlock;\n//# sourceMappingURL=DataBlock.js.map"]},"metadata":{},"sourceType":"script"}