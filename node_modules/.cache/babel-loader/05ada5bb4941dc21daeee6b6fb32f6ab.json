{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EncodeHintType_1 = require(\"../core/EncodeHintType\");\n\nvar Encoder_1 = require(\"../core/qrcode/encoder/Encoder\");\n\nvar ErrorCorrectionLevel_1 = require(\"../core/qrcode/decoder/ErrorCorrectionLevel\");\n\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n\nvar IllegalStateException_1 = require(\"../core/IllegalStateException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\n\n\nvar BrowserQRCodeSvgWriter =\n/** @class */\nfunction () {\n  function BrowserQRCodeSvgWriter() {}\n  /**\n   * Writes and renders a QRCode SVG element.\n   *\n   * @param contents\n   * @param width\n   * @param height\n   * @param hints\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    } // if (format != BarcodeFormat.QR_CODE) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n\n\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\n   * Renders the result and then appends it to the DOM.\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    if (typeof containerElement === 'string') {\n      containerElement = document.querySelector(containerElement);\n    }\n\n    var svgElement = this.write(contents, width, height, hints);\n    if (containerElement) containerElement.appendChild(svgElement);\n  };\n  /**\n   * Note that the input matrix uses 0 == white, 1 == black.\n   * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width\n  /*int*/\n  , height\n  /*int*/\n  , quietZone\n  /*int*/\n  ) {\n    var input = code.getMatrix();\n\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight)); // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n\n    return svgElement;\n  };\n  /**\n   * Creates a SVG element.\n   *\n   * @param w SVG's width attribute\n   * @param h SVG's height attribute\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n    svgElement.setAttributeNS(null, 'height', w.toString());\n    svgElement.setAttributeNS(null, 'width', h.toString());\n    return svgElement;\n  };\n  /**\n   * Creates a SVG rect element.\n   *\n   * @param x Element's x coordinate\n   * @param y Element's y coordinate\n   * @param w Element's width attribute\n   * @param h Element's height attribute\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n    rect.setAttributeNS(null, 'x', x.toString());\n    rect.setAttributeNS(null, 'y', y.toString());\n    rect.setAttributeNS(null, 'height', w.toString());\n    rect.setAttributeNS(null, 'width', h.toString());\n    rect.setAttributeNS(null, 'fill', '#000000');\n    return rect;\n  };\n\n  BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  /**\n   * SVG markup NameSpace\n   */\n\n  BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n  return BrowserQRCodeSvgWriter;\n}();\n\nexports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;","map":{"version":3,"sources":["../../src/browser/BrowserQRCodeSvgWriter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EncodeHintType_1 = require(\"../core/EncodeHintType\");\nvar Encoder_1 = require(\"../core/qrcode/encoder/Encoder\");\nvar ErrorCorrectionLevel_1 = require(\"../core/qrcode/decoder/ErrorCorrectionLevel\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../core/IllegalStateException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar BrowserQRCodeSvgWriter = /** @class */ (function () {\n    function BrowserQRCodeSvgWriter() {\n    }\n    /**\n     * Writes and renders a QRCode SVG element.\n     *\n     * @param contents\n     * @param width\n     * @param height\n     * @param hints\n     */\n    BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n        if (hints === void 0) { hints = null; }\n        if (contents.length === 0) {\n            throw new IllegalArgumentException_1.default('Found empty contents');\n        }\n        // if (format != BarcodeFormat.QR_CODE) {\n        //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n        // }\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException_1.default('Requested dimensions are too small: ' + width + 'x' + height);\n        }\n        var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n        var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n        if (hints !== null) {\n            if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n                errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n            }\n            if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n                quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n            }\n        }\n        var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n        return this.renderResult(code, width, height, quietZone);\n    };\n    /**\n     * Renders the result and then appends it to the DOM.\n     */\n    BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n        if (hints === void 0) { hints = null; }\n        if (typeof containerElement === 'string') {\n            containerElement = document.querySelector(containerElement);\n        }\n        var svgElement = this.write(contents, width, height, hints);\n        if (containerElement)\n            containerElement.appendChild(svgElement);\n    };\n    /**\n     * Note that the input matrix uses 0 == white, 1 == black.\n     * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n     */\n    BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n        var input = code.getMatrix();\n        if (input === null) {\n            throw new IllegalStateException_1.default();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var qrWidth = inputWidth + (quietZone * 2);\n        var qrHeight = inputHeight + (quietZone * 2);\n        var outputWidth = Math.max(width, qrWidth);\n        var outputHeight = Math.max(height, qrHeight);\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n        var svgElement = this.createSVGElement(outputWidth, outputHeight);\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY) === 1) {\n                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n                    svgElement.appendChild(svgRectElement);\n                }\n            }\n        }\n        return svgElement;\n    };\n    /**\n     * Creates a SVG element.\n     *\n     * @param w SVG's width attribute\n     * @param h SVG's height attribute\n     */\n    BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n        var svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n        svgElement.setAttributeNS(null, 'height', w.toString());\n        svgElement.setAttributeNS(null, 'width', h.toString());\n        return svgElement;\n    };\n    /**\n     * Creates a SVG rect element.\n     *\n     * @param x Element's x coordinate\n     * @param y Element's y coordinate\n     * @param w Element's width attribute\n     * @param h Element's height attribute\n     */\n    BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n        var rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'x', x.toString());\n        rect.setAttributeNS(null, 'y', y.toString());\n        rect.setAttributeNS(null, 'height', w.toString());\n        rect.setAttributeNS(null, 'width', h.toString());\n        rect.setAttributeNS(null, 'fill', '#000000');\n        return rect;\n    };\n    BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n    /**\n     * SVG markup NameSpace\n     */\n    BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n    return BrowserQRCodeSvgWriter;\n}());\nexports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;\n//# sourceMappingURL=BrowserQRCodeSvgWriter.js.map"]},"metadata":{},"sourceType":"script"}