{"ast":null,"code":"\"use strict\"; // The base date = 0.\n\nconst dateBase = new Date(1900, 0, 0); // The date conversion has a bug that assumes 1900 was a leap year. So we need to add one for dates after this.\n\nconst incorrectLeapDate = new Date(1900, 1, 28); // Number of milliseconds in a day.\n\nconst millisecondsInDay = 1000 * 60 * 60 * 24;\n/**\n * Date converter.\n * @private\n */\n\nmodule.exports = {\n  /**\n   * Convert a date to a number for Excel.\n   * @param {Date} date - The date.\n   * @returns {number} The number.\n   */\n  dateToNumber(date) {\n    // Clone the date and strip the time off.\n    const dateOnly = new Date(date.getTime());\n    dateOnly.setHours(0, 0, 0, 0); // Set the number to be the number of days between the date and the base date.\n    // We need to round as daylight savings will cause fractional days, which we don't want.\n\n    let number = Math.round((dateOnly - dateBase) / millisecondsInDay); // Add the true fractional days from just the milliseconds left in the current day.\n\n    number += (date - dateOnly) / millisecondsInDay; // Adjust for the \"bug\" in Excel that treats 1900 as a leap year.\n\n    if (date > incorrectLeapDate) number += 1;\n    return number;\n  },\n\n  /**\n   * Convert a number to a date.\n   * @param {number} number - The number.\n   * @returns {Date} The date.\n   */\n  numberToDate(number) {\n    // If the number is greater than the incorrect leap date, we should subtract one.\n    if (number > this.dateToNumber(incorrectLeapDate)) number--; // Break the number of full days and the remaining milliseconds in the current day.\n\n    const fullDays = Math.floor(number);\n    const partialMilliseconds = Math.round((number - fullDays) * millisecondsInDay); // Create a new date from the base date plus the time in the current day.\n\n    const date = new Date(dateBase.getTime() + partialMilliseconds); // Now add the number of full days. JS will properly handle the month/year changes.\n\n    date.setDate(date.getDate() + fullDays);\n    return date;\n  }\n\n};","map":{"version":3,"names":["dateBase","Date","incorrectLeapDate","millisecondsInDay","module","exports","dateToNumber","date","dateOnly","getTime","setHours","number","Math","round","numberToDate","fullDays","floor","partialMilliseconds","setDate","getDate"],"sources":["/Users/stichtinghelden/Documents/GitHub/patient_0_eng/patient0eng/node_modules/xlsx-populate/lib/dateConverter.js"],"sourcesContent":["\"use strict\";\n\n// The base date = 0.\nconst dateBase = new Date(1900, 0, 0);\n\n// The date conversion has a bug that assumes 1900 was a leap year. So we need to add one for dates after this.\nconst incorrectLeapDate = new Date(1900, 1, 28);\n\n// Number of milliseconds in a day.\nconst millisecondsInDay = 1000 * 60 * 60 * 24;\n\n/**\n * Date converter.\n * @private\n */\nmodule.exports = {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    dateToNumber(date) {\n        // Clone the date and strip the time off.\n        const dateOnly = new Date(date.getTime());\n        dateOnly.setHours(0, 0, 0, 0);\n\n        // Set the number to be the number of days between the date and the base date.\n        // We need to round as daylight savings will cause fractional days, which we don't want.\n        let number = Math.round((dateOnly - dateBase) / millisecondsInDay);\n        \n        // Add the true fractional days from just the milliseconds left in the current day.\n        number += (date - dateOnly) / millisecondsInDay;\n\n        // Adjust for the \"bug\" in Excel that treats 1900 as a leap year.\n        if (date > incorrectLeapDate) number += 1;\n\n        return number;\n    },\n\n    /**\n     * Convert a number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    numberToDate(number) {\n        // If the number is greater than the incorrect leap date, we should subtract one.\n        if (number > this.dateToNumber(incorrectLeapDate)) number--;\n        \n        // Break the number of full days and the remaining milliseconds in the current day.\n        const fullDays = Math.floor(number);\n        const partialMilliseconds = Math.round((number - fullDays) * millisecondsInDay);\n\n        // Create a new date from the base date plus the time in the current day.\n        const date = new Date(dateBase.getTime() + partialMilliseconds);\n\n        // Now add the number of full days. JS will properly handle the month/year changes.\n        date.setDate(date.getDate() + fullDays);\n\n        return date;\n    }\n};\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,QAAQ,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAjB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,IAAID,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAA1B,C,CAEA;;AACA,MAAME,iBAAiB,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA3C;AAEA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB;EACb;AACJ;AACA;AACA;AACA;EACIC,YAAY,CAACC,IAAD,EAAO;IACf;IACA,MAAMC,QAAQ,GAAG,IAAIP,IAAJ,CAASM,IAAI,CAACE,OAAL,EAAT,CAAjB;IACAD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAHe,CAKf;IACA;;IACA,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,QAAQ,GAAGR,QAAZ,IAAwBG,iBAAnC,CAAb,CAPe,CASf;;IACAQ,MAAM,IAAI,CAACJ,IAAI,GAAGC,QAAR,IAAoBL,iBAA9B,CAVe,CAYf;;IACA,IAAII,IAAI,GAAGL,iBAAX,EAA8BS,MAAM,IAAI,CAAV;IAE9B,OAAOA,MAAP;EACH,CAtBY;;EAwBb;AACJ;AACA;AACA;AACA;EACIG,YAAY,CAACH,MAAD,EAAS;IACjB;IACA,IAAIA,MAAM,GAAG,KAAKL,YAAL,CAAkBJ,iBAAlB,CAAb,EAAmDS,MAAM,GAFxC,CAIjB;;IACA,MAAMI,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAjB;IACA,MAAMM,mBAAmB,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACF,MAAM,GAAGI,QAAV,IAAsBZ,iBAAjC,CAA5B,CANiB,CAQjB;;IACA,MAAMI,IAAI,GAAG,IAAIN,IAAJ,CAASD,QAAQ,CAACS,OAAT,KAAqBQ,mBAA9B,CAAb,CATiB,CAWjB;;IACAV,IAAI,CAACW,OAAL,CAAaX,IAAI,CAACY,OAAL,KAAiBJ,QAA9B;IAEA,OAAOR,IAAP;EACH;;AA5CY,CAAjB"},"metadata":{},"sourceType":"script"}