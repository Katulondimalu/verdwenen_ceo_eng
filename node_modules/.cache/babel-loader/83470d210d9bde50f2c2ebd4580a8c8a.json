{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\n/*import java.util.List;*/\n\n/**\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\n * as well as a String interpretation of those bytes, if applicable.</p>\n *\n * @author Sean Owen\n */\n\nvar DecoderResult =\n/** @class */\nfunction () {\n  // public constructor(rawBytes: Uint8Array,\n  //                      text: string,\n  //                      List<Uint8Array> byteSegments,\n  //                      String ecLevel) {\n  //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n  // }\n  function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\n    if (structuredAppendSequenceNumber === void 0) {\n      structuredAppendSequenceNumber = -1;\n    }\n\n    if (structuredAppendParity === void 0) {\n      structuredAppendParity = -1;\n    }\n\n    this.rawBytes = rawBytes;\n    this.text = text;\n    this.byteSegments = byteSegments;\n    this.ecLevel = ecLevel;\n    this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n    this.structuredAppendParity = structuredAppendParity;\n    this.numBits = rawBytes === undefined || rawBytes === null ? 0 : 8 * rawBytes.length;\n  }\n  /**\n   * @return raw bytes representing the result, or {@code null} if not applicable\n   */\n\n\n  DecoderResult.prototype.getRawBytes = function () {\n    return this.rawBytes;\n  };\n  /**\n   * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n   * @since 3.3.0\n   */\n\n\n  DecoderResult.prototype.getNumBits = function () {\n    return this.numBits;\n  };\n  /**\n   * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\n   * @since 3.3.0\n   */\n\n\n  DecoderResult.prototype.setNumBits = function (numBits\n  /*int*/\n  ) {\n    this.numBits = numBits;\n  };\n  /**\n   * @return text representation of the result\n   */\n\n\n  DecoderResult.prototype.getText = function () {\n    return this.text;\n  };\n  /**\n   * @return list of byte segments in the result, or {@code null} if not applicable\n   */\n\n\n  DecoderResult.prototype.getByteSegments = function () {\n    return this.byteSegments;\n  };\n  /**\n   * @return name of error correction level used, or {@code null} if not applicable\n   */\n\n\n  DecoderResult.prototype.getECLevel = function () {\n    return this.ecLevel;\n  };\n  /**\n   * @return number of errors corrected, or {@code null} if not applicable\n   */\n\n\n  DecoderResult.prototype.getErrorsCorrected = function () {\n    return this.errorsCorrected;\n  };\n\n  DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected\n  /*Integer*/\n  ) {\n    this.errorsCorrected = errorsCorrected;\n  };\n  /**\n   * @return number of erasures corrected, or {@code null} if not applicable\n   */\n\n\n  DecoderResult.prototype.getErasures = function () {\n    return this.erasures;\n  };\n\n  DecoderResult.prototype.setErasures = function (erasures\n  /*Integer*/\n  ) {\n    this.erasures = erasures;\n  };\n  /**\n   * @return arbitrary additional metadata\n   */\n\n\n  DecoderResult.prototype.getOther = function () {\n    return this.other;\n  };\n\n  DecoderResult.prototype.setOther = function (other) {\n    this.other = other;\n  };\n\n  DecoderResult.prototype.hasStructuredAppend = function () {\n    return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n  };\n\n  DecoderResult.prototype.getStructuredAppendParity = function () {\n    return this.structuredAppendParity;\n  };\n\n  DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\n    return this.structuredAppendSequenceNumber;\n  };\n\n  return DecoderResult;\n}();\n\nexports.default = DecoderResult;","map":{"version":3,"sources":["../../../src/core/common/DecoderResult.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;AAEH;;AAEA;;AAEA;;;;;;AAMG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;EAOI;EACA;EACA;EACA;EACA;EACA;EAEA,SAAA,aAAA,CAA2B,QAA3B,EACY,IADZ,EAEY,YAFZ,EAGY,OAHZ,EAIY,8BAJZ,EAKY,sBALZ,EAKuD;IAD3C,IAAA,8BAAA,KAAA,KAAA,CAAA,EAAA;MAAA,8BAAA,GAAA,CAAkD,CAAlD;IAAmD;;IACnD,IAAA,sBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,sBAAA,GAAA,CAA0C,CAA1C;IAA2C;;IAL5B,KAAA,QAAA,GAAA,QAAA;IACf,KAAA,IAAA,GAAA,IAAA;IACA,KAAA,YAAA,GAAA,YAAA;IACA,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,8BAAA,GAAA,8BAAA;IACA,KAAA,sBAAA,GAAA,sBAAA;IACR,KAAK,OAAL,GAAgB,QAAQ,KAAK,SAAb,IAA0B,QAAQ,KAAK,IAAxC,GAAgD,CAAhD,GAAoD,IAAI,QAAQ,CAAC,MAAhF;EACH;EAED;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;IACI,OAAO,KAAK,QAAZ;EACH,CAFM;EAIP;;;AAGG;;;EACI,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;IACI,OAAO,KAAK,OAAZ;EACH,CAFM;EAIP;;;AAGG;;;EACI,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB;EAAgB;EAAlC,EAAyC;IACrC,KAAK,OAAL,GAAe,OAAf;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;IACI,OAAO,KAAK,IAAZ;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;IACI,OAAO,KAAK,YAAZ;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;IACI,OAAO,KAAK,OAAZ;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;IACI,OAAO,KAAK,eAAZ;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B;EAAuB;EAAjD,EAA4D;IACxD,KAAK,eAAL,GAAuB,eAAvB;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;IACI,OAAO,KAAK,QAAZ;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB;EAAgB;EAAnC,EAA8C;IAC1C,KAAK,QAAL,GAAgB,QAAhB;EACH,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;IACI,OAAO,KAAK,KAAZ;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAA0B;IACtB,KAAK,KAAL,GAAa,KAAb;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,YAAA;IACI,OAAO,KAAK,sBAAL,IAA+B,CAA/B,IAAoC,KAAK,8BAAL,IAAuC,CAAlF;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,YAAA;IACI,OAAO,KAAK,sBAAZ;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,iCAAA,GAAP,YAAA;IACI,OAAO,KAAK,8BAAZ;EACH,CAFM;;EAIX,OAAA,aAAA;AAAC,CAhHD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.util.List;*/\n/**\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\n * as well as a String interpretation of those bytes, if applicable.</p>\n *\n * @author Sean Owen\n */\nvar DecoderResult = /** @class */ (function () {\n    // public constructor(rawBytes: Uint8Array,\n    //                      text: string,\n    //                      List<Uint8Array> byteSegments,\n    //                      String ecLevel) {\n    //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n    // }\n    function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\n        if (structuredAppendSequenceNumber === void 0) { structuredAppendSequenceNumber = -1; }\n        if (structuredAppendParity === void 0) { structuredAppendParity = -1; }\n        this.rawBytes = rawBytes;\n        this.text = text;\n        this.byteSegments = byteSegments;\n        this.ecLevel = ecLevel;\n        this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n        this.structuredAppendParity = structuredAppendParity;\n        this.numBits = (rawBytes === undefined || rawBytes === null) ? 0 : 8 * rawBytes.length;\n    }\n    /**\n     * @return raw bytes representing the result, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getRawBytes = function () {\n        return this.rawBytes;\n    };\n    /**\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n     * @since 3.3.0\n     */\n    DecoderResult.prototype.getNumBits = function () {\n        return this.numBits;\n    };\n    /**\n     * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\n     * @since 3.3.0\n     */\n    DecoderResult.prototype.setNumBits = function (numBits /*int*/) {\n        this.numBits = numBits;\n    };\n    /**\n     * @return text representation of the result\n     */\n    DecoderResult.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @return list of byte segments in the result, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getByteSegments = function () {\n        return this.byteSegments;\n    };\n    /**\n     * @return name of error correction level used, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getECLevel = function () {\n        return this.ecLevel;\n    };\n    /**\n     * @return number of errors corrected, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getErrorsCorrected = function () {\n        return this.errorsCorrected;\n    };\n    DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected /*Integer*/) {\n        this.errorsCorrected = errorsCorrected;\n    };\n    /**\n     * @return number of erasures corrected, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getErasures = function () {\n        return this.erasures;\n    };\n    DecoderResult.prototype.setErasures = function (erasures /*Integer*/) {\n        this.erasures = erasures;\n    };\n    /**\n     * @return arbitrary additional metadata\n     */\n    DecoderResult.prototype.getOther = function () {\n        return this.other;\n    };\n    DecoderResult.prototype.setOther = function (other) {\n        this.other = other;\n    };\n    DecoderResult.prototype.hasStructuredAppend = function () {\n        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n    };\n    DecoderResult.prototype.getStructuredAppendParity = function () {\n        return this.structuredAppendParity;\n    };\n    DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\n        return this.structuredAppendSequenceNumber;\n    };\n    return DecoderResult;\n}());\nexports.default = DecoderResult;\n//# sourceMappingURL=DecoderResult.js.map"]},"metadata":{},"sourceType":"script"}