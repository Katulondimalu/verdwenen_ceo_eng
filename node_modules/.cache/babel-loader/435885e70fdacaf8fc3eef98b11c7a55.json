{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // import com.google.zxing.pdf417.PDF417Common;\n\nvar PDF417Common_1 = require(\"../PDF417Common\");\n\nvar BarcodeMetadata_1 = require(\"./BarcodeMetadata\");\n\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\n\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\n/**\n * @author Guenther Grau\n */\n\n\nvar DetectionResultRowIndicatorColumn =\n/** @class */\nfunction (_super) {\n  __extends(DetectionResultRowIndicatorColumn, _super);\n\n  function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n    var _this = _super.call(this, boundingBox) || this;\n\n    _this._isLeft = isLeft;\n    return _this;\n  }\n\n  DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value\n        /*Codeword*/\n        ;\n\n        if (codeword != null) {\n          codeword.setRowNumberAsRowIndicatorColumn();\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }; // TODO implement properly\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n\n\n  DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var codewords = this.getCodewords();\n    this.setRowNumbers();\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY())); // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n    // taller rows\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n\n    for (var codewordsRow\n    /*int*/\n    = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var codeword = codewords[codewordsRow]; //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n      //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n      //        SimpleLog.log(LEVEL.WARNING,\n      //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n      //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n      //        codewords[codewordsRow] = null;\n      //      }\n\n      var rowDifference = codeword.getRowNumber() - barcodeRow; // TODO improve handling with case where first row indicator doesn't start with 0\n\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (rowDifference < 0 || codeword.getRowNumber() >= barcodeMetadata.getRowCount() || rowDifference > codewordsRow) {\n        codewords[codewordsRow] = null;\n      } else {\n        var checkedRows = void 0;\n\n        if (maxRowHeight > 2) {\n          checkedRows = (maxRowHeight - 2) * rowDifference;\n        } else {\n          checkedRows = rowDifference;\n        }\n\n        var closePreviousCodewordFound = checkedRows >= codewordsRow;\n\n        for (var i\n        /*int*/\n        = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n          // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n          // This should hopefully get rid of most problems already.\n          closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n        }\n\n        if (closePreviousCodewordFound) {\n          codewords[codewordsRow] = null;\n        } else {\n          barcodeRow = codeword.getRowNumber();\n          currentRowHeight = 1;\n        }\n      }\n    } // return (int) (averageRowHeight + 0.5);\n\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n    var e_2, _a;\n\n    var barcodeMetadata = this.getBarcodeMetadata();\n\n    if (barcodeMetadata == null) {\n      return null;\n    }\n\n    this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n    var result = new Int32Array(barcodeMetadata.getRowCount());\n\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value\n        /*Codeword*/\n        ;\n\n        if (codeword != null) {\n          var rowNumber = codeword.getRowNumber();\n\n          if (rowNumber >= result.length) {\n            // We have more rows than the barcode metadata allows for, ignore them.\n            continue;\n          }\n\n          result[rowNumber]++;\n        } // else throw exception?\n\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return result;\n  }; // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n\n\n  DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY())); // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n\n    var codewords = this.getCodewords();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n\n    for (var codewordsRow\n    /*int*/\n    = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var codeword = codewords[codewordsRow];\n      codeword.setRowNumberAsRowIndicatorColumn();\n      var rowDifference = codeword.getRowNumber() - barcodeRow; // TODO improve handling with case where first row indicator doesn't start with 0\n\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n        codewords[codewordsRow] = null;\n      } else {\n        barcodeRow = codeword.getRowNumber();\n        currentRowHeight = 1;\n      }\n    } // return (int) (averageRowHeight + 0.5);\n\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n    var e_3, _a;\n\n    var codewords = this.getCodewords();\n    var barcodeColumnCount = new BarcodeValue_1.default();\n    var barcodeRowCountUpperPart = new BarcodeValue_1.default();\n    var barcodeRowCountLowerPart = new BarcodeValue_1.default();\n    var barcodeECLevel = new BarcodeValue_1.default();\n\n    try {\n      for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n        var codeword = codewords_1_1.value\n        /*Codeword*/\n        ;\n\n        if (codeword == null) {\n          continue;\n        }\n\n        codeword.setRowNumberAsRowIndicatorColumn();\n        var rowIndicatorValue = codeword.getValue() % 30;\n        var codewordRowNumber = codeword.getRowNumber();\n\n        if (!this._isLeft) {\n          codewordRowNumber += 2;\n        }\n\n        switch (codewordRowNumber % 3) {\n          case 0:\n            barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n            break;\n\n          case 1:\n            barcodeECLevel.setValue(rowIndicatorValue / 3);\n            barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n            break;\n\n          case 2:\n            barcodeColumnCount.setValue(rowIndicatorValue + 1);\n            break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    } // Maybe we should check if we have ambiguous values?\n\n\n    if (barcodeColumnCount.getValue().length === 0 || barcodeRowCountUpperPart.getValue().length === 0 || barcodeRowCountLowerPart.getValue().length === 0 || barcodeECLevel.getValue().length === 0 || barcodeColumnCount.getValue()[0] < 1 || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_1.default.MIN_ROWS_IN_BARCODE || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_1.default.MAX_ROWS_IN_BARCODE) {\n      return null;\n    }\n\n    var barcodeMetadata = new BarcodeMetadata_1.default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    return barcodeMetadata;\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n    // Remove codewords which do not match the metadata\n    // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n    for (var codewordRow\n    /*int*/\n    = 0; codewordRow < codewords.length; codewordRow++) {\n      var codeword = codewords[codewordRow];\n\n      if (codewords[codewordRow] == null) {\n        continue;\n      }\n\n      var rowIndicatorValue = codeword.getValue() % 30;\n      var codewordRowNumber = codeword.getRowNumber();\n\n      if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n        codewords[codewordRow] = null;\n        continue;\n      }\n\n      if (!this._isLeft) {\n        codewordRowNumber += 2;\n      }\n\n      switch (codewordRowNumber % 3) {\n        case 0:\n          if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n\n        case 1:\n          if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() || rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n\n        case 2:\n          if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n      }\n    }\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n    return this._isLeft;\n  }; // @Override\n\n\n  DetectionResultRowIndicatorColumn.prototype.toString = function () {\n    return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n  };\n\n  return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn_1.default);\n\nexports.default = DetectionResultRowIndicatorColumn;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/DetectionResultRowIndicatorColumn.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar BarcodeMetadata_1 = require(\"./BarcodeMetadata\");\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResultRowIndicatorColumn = /** @class */ (function (_super) {\n    __extends(DetectionResultRowIndicatorColumn, _super);\n    function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n        var _this = _super.call(this, boundingBox) || this;\n        _this._isLeft = isLeft;\n        return _this;\n    }\n    DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var codeword = _c.value /*Codeword*/;\n                if (codeword != null) {\n                    codeword.setRowNumberAsRowIndicatorColumn();\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    // TODO implement properly\n    // TODO maybe we should add missing codewords to store the correct row number to make\n    // finding row numbers for other columns easier\n    // use row height count to make detection of invalid row numbers more reliable\n    DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n        var codewords = this.getCodewords();\n        this.setRowNumbers();\n        this.removeIncorrectCodewords(codewords, barcodeMetadata);\n        var boundingBox = this.getBoundingBox();\n        var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n        var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n        var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n        var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n        // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n        // taller rows\n        // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n        var barcodeRow = -1;\n        var maxRowHeight = 1;\n        var currentRowHeight = 0;\n        for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var codeword = codewords[codewordsRow];\n            //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n            //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n            //        SimpleLog.log(LEVEL.WARNING,\n            //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n            //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n            //        codewords[codewordsRow] = null;\n            //      }\n            var rowDifference = codeword.getRowNumber() - barcodeRow;\n            // TODO improve handling with case where first row indicator doesn't start with 0\n            if (rowDifference === 0) {\n                currentRowHeight++;\n            }\n            else if (rowDifference === 1) {\n                maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n                currentRowHeight = 1;\n                barcodeRow = codeword.getRowNumber();\n            }\n            else if (rowDifference < 0 ||\n                codeword.getRowNumber() >= barcodeMetadata.getRowCount() ||\n                rowDifference > codewordsRow) {\n                codewords[codewordsRow] = null;\n            }\n            else {\n                var checkedRows = void 0;\n                if (maxRowHeight > 2) {\n                    checkedRows = (maxRowHeight - 2) * rowDifference;\n                }\n                else {\n                    checkedRows = rowDifference;\n                }\n                var closePreviousCodewordFound = checkedRows >= codewordsRow;\n                for (var i /*int*/ = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n                    // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n                    // This should hopefully get rid of most problems already.\n                    closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n                }\n                if (closePreviousCodewordFound) {\n                    codewords[codewordsRow] = null;\n                }\n                else {\n                    barcodeRow = codeword.getRowNumber();\n                    currentRowHeight = 1;\n                }\n            }\n        }\n        // return (int) (averageRowHeight + 0.5);\n    };\n    DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n        var e_2, _a;\n        var barcodeMetadata = this.getBarcodeMetadata();\n        if (barcodeMetadata == null) {\n            return null;\n        }\n        this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n        var result = new Int32Array(barcodeMetadata.getRowCount());\n        try {\n            for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var codeword = _c.value /*Codeword*/;\n                if (codeword != null) {\n                    var rowNumber = codeword.getRowNumber();\n                    if (rowNumber >= result.length) {\n                        // We have more rows than the barcode metadata allows for, ignore them.\n                        continue;\n                    }\n                    result[rowNumber]++;\n                } // else throw exception?\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return result;\n    };\n    // TODO maybe we should add missing codewords to store the correct row number to make\n    // finding row numbers for other columns easier\n    // use row height count to make detection of invalid row numbers more reliable\n    DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n        var boundingBox = this.getBoundingBox();\n        var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n        var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n        var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n        var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY()));\n        // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n        var codewords = this.getCodewords();\n        var barcodeRow = -1;\n        var maxRowHeight = 1;\n        var currentRowHeight = 0;\n        for (var codewordsRow /*int*/ = firstRow; codewordsRow < lastRow; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var codeword = codewords[codewordsRow];\n            codeword.setRowNumberAsRowIndicatorColumn();\n            var rowDifference = codeword.getRowNumber() - barcodeRow;\n            // TODO improve handling with case where first row indicator doesn't start with 0\n            if (rowDifference === 0) {\n                currentRowHeight++;\n            }\n            else if (rowDifference === 1) {\n                maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n                currentRowHeight = 1;\n                barcodeRow = codeword.getRowNumber();\n            }\n            else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n                codewords[codewordsRow] = null;\n            }\n            else {\n                barcodeRow = codeword.getRowNumber();\n                currentRowHeight = 1;\n            }\n        }\n        // return (int) (averageRowHeight + 0.5);\n    };\n    DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n        var e_3, _a;\n        var codewords = this.getCodewords();\n        var barcodeColumnCount = new BarcodeValue_1.default();\n        var barcodeRowCountUpperPart = new BarcodeValue_1.default();\n        var barcodeRowCountLowerPart = new BarcodeValue_1.default();\n        var barcodeECLevel = new BarcodeValue_1.default();\n        try {\n            for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n                var codeword = codewords_1_1.value /*Codeword*/;\n                if (codeword == null) {\n                    continue;\n                }\n                codeword.setRowNumberAsRowIndicatorColumn();\n                var rowIndicatorValue = codeword.getValue() % 30;\n                var codewordRowNumber = codeword.getRowNumber();\n                if (!this._isLeft) {\n                    codewordRowNumber += 2;\n                }\n                switch (codewordRowNumber % 3) {\n                    case 0:\n                        barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n                        break;\n                    case 1:\n                        barcodeECLevel.setValue(rowIndicatorValue / 3);\n                        barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n                        break;\n                    case 2:\n                        barcodeColumnCount.setValue(rowIndicatorValue + 1);\n                        break;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        // Maybe we should check if we have ambiguous values?\n        if ((barcodeColumnCount.getValue().length === 0) ||\n            (barcodeRowCountUpperPart.getValue().length === 0) ||\n            (barcodeRowCountLowerPart.getValue().length === 0) ||\n            (barcodeECLevel.getValue().length === 0) ||\n            barcodeColumnCount.getValue()[0] < 1 ||\n            barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_1.default.MIN_ROWS_IN_BARCODE ||\n            barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_1.default.MAX_ROWS_IN_BARCODE) {\n            return null;\n        }\n        var barcodeMetadata = new BarcodeMetadata_1.default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n        this.removeIncorrectCodewords(codewords, barcodeMetadata);\n        return barcodeMetadata;\n    };\n    DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n        // Remove codewords which do not match the metadata\n        // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n        for (var codewordRow /*int*/ = 0; codewordRow < codewords.length; codewordRow++) {\n            var codeword = codewords[codewordRow];\n            if (codewords[codewordRow] == null) {\n                continue;\n            }\n            var rowIndicatorValue = codeword.getValue() % 30;\n            var codewordRowNumber = codeword.getRowNumber();\n            if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n                codewords[codewordRow] = null;\n                continue;\n            }\n            if (!this._isLeft) {\n                codewordRowNumber += 2;\n            }\n            switch (codewordRowNumber % 3) {\n                case 0:\n                    if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n                case 1:\n                    if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() ||\n                        rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n                case 2:\n                    if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n                        codewords[codewordRow] = null;\n                    }\n                    break;\n            }\n        }\n    };\n    DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n        return this._isLeft;\n    };\n    // @Override\n    DetectionResultRowIndicatorColumn.prototype.toString = function () {\n        return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n    };\n    return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn_1.default));\nexports.default = DetectionResultRowIndicatorColumn;\n//# sourceMappingURL=DetectionResultRowIndicatorColumn.js.map"]},"metadata":{},"sourceType":"script"}