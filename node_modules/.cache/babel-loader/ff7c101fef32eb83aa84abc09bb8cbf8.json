{"ast":null,"code":"\"use strict\";\n/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.common.detector.MathUtils;\n\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\"); // import com.google.zxing.pdf417.PDF417Common;\n\n\nvar PDF417Common_1 = require(\"../PDF417Common\");\n\nvar Float_1 = require(\"../../util/Float\");\n/**\n * @author Guenther Grau\n * @author creatale GmbH (christoph.schulz@creatale.de)\n */\n\n\nvar PDF417CodewordDecoder =\n/** @class */\nfunction () {\n  function PDF417CodewordDecoder() {}\n  /* @note\n   * this action have to be performed before first use of class\n   * - static constructor\n   * working with 32bit float (based from Java logic)\n  */\n\n\n  PDF417CodewordDecoder.initialize = function () {\n    // Pre-computes the symbol ratio table.\n    for (\n    /*int*/\n    var i = 0; i < PDF417Common_1.default.SYMBOL_TABLE.length; i++) {\n      var currentSymbol = PDF417Common_1.default.SYMBOL_TABLE[i];\n      var currentBit = currentSymbol & 0x1;\n\n      for (\n      /*int*/\n      var j = 0; j < PDF417Common_1.default.BARS_IN_MODULE; j++) {\n        var size = 0.0;\n\n        while ((currentSymbol & 0x1) === currentBit) {\n          size += 1.0;\n          currentSymbol >>= 1;\n        }\n\n        currentBit = currentSymbol & 0x1;\n\n        if (!PDF417CodewordDecoder.RATIOS_TABLE[i]) {\n          PDF417CodewordDecoder.RATIOS_TABLE[i] = new Array(PDF417Common_1.default.BARS_IN_MODULE);\n        }\n\n        PDF417CodewordDecoder.RATIOS_TABLE[i][PDF417Common_1.default.BARS_IN_MODULE - j - 1] = Math.fround(size / PDF417Common_1.default.MODULES_IN_CODEWORD);\n      }\n    }\n\n    this.bSymbolTableReady = true;\n  };\n\n  PDF417CodewordDecoder.getDecodedValue = function (moduleBitCount) {\n    var decodedValue = PDF417CodewordDecoder.getDecodedCodewordValue(PDF417CodewordDecoder.sampleBitCounts(moduleBitCount));\n\n    if (decodedValue !== -1) {\n      return decodedValue;\n    }\n\n    return PDF417CodewordDecoder.getClosestDecodedValue(moduleBitCount);\n  };\n\n  PDF417CodewordDecoder.sampleBitCounts = function (moduleBitCount) {\n    var bitCountSum = MathUtils_1.default.sum(moduleBitCount);\n    var result = new Int32Array(PDF417Common_1.default.BARS_IN_MODULE);\n    var bitCountIndex = 0;\n    var sumPreviousBits = 0;\n\n    for (\n    /*int*/\n    var i = 0; i < PDF417Common_1.default.MODULES_IN_CODEWORD; i++) {\n      var sampleIndex = bitCountSum / (2 * PDF417Common_1.default.MODULES_IN_CODEWORD) + i * bitCountSum / PDF417Common_1.default.MODULES_IN_CODEWORD;\n\n      if (sumPreviousBits + moduleBitCount[bitCountIndex] <= sampleIndex) {\n        sumPreviousBits += moduleBitCount[bitCountIndex];\n        bitCountIndex++;\n      }\n\n      result[bitCountIndex]++;\n    }\n\n    return result;\n  };\n\n  PDF417CodewordDecoder.getDecodedCodewordValue = function (moduleBitCount) {\n    var decodedValue = PDF417CodewordDecoder.getBitValue(moduleBitCount);\n    return PDF417Common_1.default.getCodeword(decodedValue) === -1 ? -1 : decodedValue;\n  };\n\n  PDF417CodewordDecoder.getBitValue = function (moduleBitCount) {\n    var result =\n    /*long*/\n    0;\n\n    for (var\n    /*int*/\n    i = 0; i < moduleBitCount.length; i++) {\n      for (\n      /*int*/\n      var bit = 0; bit < moduleBitCount[i]; bit++) {\n        result = result << 1 | (i % 2 === 0 ? 1 : 0);\n      }\n    }\n\n    return Math.trunc(result);\n  }; // working with 32bit float (as in Java)\n\n\n  PDF417CodewordDecoder.getClosestDecodedValue = function (moduleBitCount) {\n    var bitCountSum = MathUtils_1.default.sum(moduleBitCount);\n    var bitCountRatios = new Array(PDF417Common_1.default.BARS_IN_MODULE);\n\n    if (bitCountSum > 1) {\n      for (var\n      /*int*/\n      i = 0; i < bitCountRatios.length; i++) {\n        bitCountRatios[i] = Math.fround(moduleBitCount[i] / bitCountSum);\n      }\n    }\n\n    var bestMatchError = Float_1.default.MAX_VALUE;\n    var bestMatch = -1;\n\n    if (!this.bSymbolTableReady) {\n      PDF417CodewordDecoder.initialize();\n    }\n\n    for (\n    /*int*/\n    var j = 0; j < PDF417CodewordDecoder.RATIOS_TABLE.length; j++) {\n      var error = 0.0;\n      var ratioTableRow = PDF417CodewordDecoder.RATIOS_TABLE[j];\n\n      for (\n      /*int*/\n      var k = 0; k < PDF417Common_1.default.BARS_IN_MODULE; k++) {\n        var diff = Math.fround(ratioTableRow[k] - bitCountRatios[k]);\n        error += Math.fround(diff * diff);\n\n        if (error >= bestMatchError) {\n          break;\n        }\n      }\n\n      if (error < bestMatchError) {\n        bestMatchError = error;\n        bestMatch = PDF417Common_1.default.SYMBOL_TABLE[j];\n      }\n    }\n\n    return bestMatch;\n  }; // flag that the table is ready for use\n\n\n  PDF417CodewordDecoder.bSymbolTableReady = false;\n  PDF417CodewordDecoder.RATIOS_TABLE = new Array(PDF417Common_1.default.SYMBOL_TABLE.length).map(function (x) {\n    return x = new Array(PDF417Common_1.default.BARS_IN_MODULE);\n  });\n  return PDF417CodewordDecoder;\n}();\n\nexports.default = PDF417CodewordDecoder;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/PDF417CodewordDecoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.common.detector.MathUtils;\nvar MathUtils_1 = require(\"../../common/detector/MathUtils\");\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar Float_1 = require(\"../../util/Float\");\n/**\n * @author Guenther Grau\n * @author creatale GmbH (christoph.schulz@creatale.de)\n */\nvar PDF417CodewordDecoder = /** @class */ (function () {\n    function PDF417CodewordDecoder() {\n    }\n    /* @note\n     * this action have to be performed before first use of class\n     * - static constructor\n     * working with 32bit float (based from Java logic)\n    */\n    PDF417CodewordDecoder.initialize = function () {\n        // Pre-computes the symbol ratio table.\n        for ( /*int*/var i = 0; i < PDF417Common_1.default.SYMBOL_TABLE.length; i++) {\n            var currentSymbol = PDF417Common_1.default.SYMBOL_TABLE[i];\n            var currentBit = currentSymbol & 0x1;\n            for ( /*int*/var j = 0; j < PDF417Common_1.default.BARS_IN_MODULE; j++) {\n                var size = 0.0;\n                while ((currentSymbol & 0x1) === currentBit) {\n                    size += 1.0;\n                    currentSymbol >>= 1;\n                }\n                currentBit = currentSymbol & 0x1;\n                if (!PDF417CodewordDecoder.RATIOS_TABLE[i]) {\n                    PDF417CodewordDecoder.RATIOS_TABLE[i] = new Array(PDF417Common_1.default.BARS_IN_MODULE);\n                }\n                PDF417CodewordDecoder.RATIOS_TABLE[i][PDF417Common_1.default.BARS_IN_MODULE - j - 1] = Math.fround(size / PDF417Common_1.default.MODULES_IN_CODEWORD);\n            }\n        }\n        this.bSymbolTableReady = true;\n    };\n    PDF417CodewordDecoder.getDecodedValue = function (moduleBitCount) {\n        var decodedValue = PDF417CodewordDecoder.getDecodedCodewordValue(PDF417CodewordDecoder.sampleBitCounts(moduleBitCount));\n        if (decodedValue !== -1) {\n            return decodedValue;\n        }\n        return PDF417CodewordDecoder.getClosestDecodedValue(moduleBitCount);\n    };\n    PDF417CodewordDecoder.sampleBitCounts = function (moduleBitCount) {\n        var bitCountSum = MathUtils_1.default.sum(moduleBitCount);\n        var result = new Int32Array(PDF417Common_1.default.BARS_IN_MODULE);\n        var bitCountIndex = 0;\n        var sumPreviousBits = 0;\n        for ( /*int*/var i = 0; i < PDF417Common_1.default.MODULES_IN_CODEWORD; i++) {\n            var sampleIndex = bitCountSum / (2 * PDF417Common_1.default.MODULES_IN_CODEWORD) +\n                (i * bitCountSum) / PDF417Common_1.default.MODULES_IN_CODEWORD;\n            if (sumPreviousBits + moduleBitCount[bitCountIndex] <= sampleIndex) {\n                sumPreviousBits += moduleBitCount[bitCountIndex];\n                bitCountIndex++;\n            }\n            result[bitCountIndex]++;\n        }\n        return result;\n    };\n    PDF417CodewordDecoder.getDecodedCodewordValue = function (moduleBitCount) {\n        var decodedValue = PDF417CodewordDecoder.getBitValue(moduleBitCount);\n        return PDF417Common_1.default.getCodeword(decodedValue) === -1 ? -1 : decodedValue;\n    };\n    PDF417CodewordDecoder.getBitValue = function (moduleBitCount) {\n        var result = /*long*/ 0;\n        for (var /*int*/ i = 0; i < moduleBitCount.length; i++) {\n            for ( /*int*/var bit = 0; bit < moduleBitCount[i]; bit++) {\n                result = (result << 1) | (i % 2 === 0 ? 1 : 0);\n            }\n        }\n        return Math.trunc(result);\n    };\n    // working with 32bit float (as in Java)\n    PDF417CodewordDecoder.getClosestDecodedValue = function (moduleBitCount) {\n        var bitCountSum = MathUtils_1.default.sum(moduleBitCount);\n        var bitCountRatios = new Array(PDF417Common_1.default.BARS_IN_MODULE);\n        if (bitCountSum > 1) {\n            for (var /*int*/ i = 0; i < bitCountRatios.length; i++) {\n                bitCountRatios[i] = Math.fround(moduleBitCount[i] / bitCountSum);\n            }\n        }\n        var bestMatchError = Float_1.default.MAX_VALUE;\n        var bestMatch = -1;\n        if (!this.bSymbolTableReady) {\n            PDF417CodewordDecoder.initialize();\n        }\n        for ( /*int*/var j = 0; j < PDF417CodewordDecoder.RATIOS_TABLE.length; j++) {\n            var error = 0.0;\n            var ratioTableRow = PDF417CodewordDecoder.RATIOS_TABLE[j];\n            for ( /*int*/var k = 0; k < PDF417Common_1.default.BARS_IN_MODULE; k++) {\n                var diff = Math.fround(ratioTableRow[k] - bitCountRatios[k]);\n                error += Math.fround(diff * diff);\n                if (error >= bestMatchError) {\n                    break;\n                }\n            }\n            if (error < bestMatchError) {\n                bestMatchError = error;\n                bestMatch = PDF417Common_1.default.SYMBOL_TABLE[j];\n            }\n        }\n        return bestMatch;\n    };\n    // flag that the table is ready for use\n    PDF417CodewordDecoder.bSymbolTableReady = false;\n    PDF417CodewordDecoder.RATIOS_TABLE = new Array(PDF417Common_1.default.SYMBOL_TABLE.length).map(function (x) { return x = new Array(PDF417Common_1.default.BARS_IN_MODULE); });\n    return PDF417CodewordDecoder;\n}());\nexports.default = PDF417CodewordDecoder;\n//# sourceMappingURL=PDF417CodewordDecoder.js.map"]},"metadata":{},"sourceType":"script"}