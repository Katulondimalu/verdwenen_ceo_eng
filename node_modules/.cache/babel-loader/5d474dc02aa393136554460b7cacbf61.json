{"ast":null,"code":"import { saveAs } from 'file-saver';\nimport XlsxPopulate from 'xlsx-populate';\nexport const getDimenssion = (event, setfirst) => {\n  var file, img;\n  file = event.target.files[0];\n  img = new Image();\n  var objectUrl = URL.createObjectURL(file);\n  img.src = objectUrl;\n\n  img.onload = function () {\n    setfirst({\n      width: img.naturalWidth,\n      height: img.naturalHeight\n    });\n  };\n};\nexport const validation = values => {\n  const errors = {};\n  if (!values.name) errors.name = 'Name is required';\n  if (!values.email) errors.email = 'Email is required';else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n  if (!values.age) errors.age = 'Age is required';else if (isNaN(Number(values.age))) {\n    errors.age = 'Age must be a number';\n  }\n  if (!values.city) errors.city = 'City is required';\n  if (!values.phone) errors.phone = 'Phone is required';else if (isNaN(Number(values.phone))) {\n    errors.phone = 'Phone must be a number';\n  }\n  return errors;\n};\nexport const loginValidation = values => {\n  const errors = {};\n  if (!values.email) errors.email = 'Email is required';else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n  if (!values.password) errors.password = 'Password is required';\n  return errors;\n};\nexport const secondsToMinutes = time => {\n  return Math.floor(time / 60).toFixed(0) + ':' + Math.floor(time % 60).toFixed(0).padStart(2, '0');\n};\nexport const saveAsExcel = data => {\n  if (data.lngth === 0) return;\n  let header = ['Age', 'City', 'Date', 'Email', 'Name', 'Phone', 'Room Id'];\n  XlsxPopulate.fromBlankAsync().then(async workbook => {\n    const sheet1 = workbook.sheet(0);\n    const sheetData = getSheetData(data, header);\n    const totalColumns = sheetData[0].length;\n    sheet1.cell('A1').value(sheetData);\n    const range = sheet1.usedRange();\n    const endColumn = String.fromCharCode(64 + totalColumns);\n    sheet1.row(1).style('bold', true);\n    sheet1.range('A1:' + endColumn + '1').style('fill', 'BFBFBF');\n    range.style('border', true);\n    workbook.outputAsync().then(res => {\n      saveAs(res, `${new Date().getTime()}_game_users.xlsx`);\n    });\n    return false;\n  });\n};\n\nconst getSheetData = (data, header) => {\n  var fields = Object.keys(data[0]);\n  var sheetData = data.map(function (row) {\n    return fields.map(function (fieldName) {\n      return row[fieldName] ? row[fieldName] : '';\n    });\n  });\n  sheetData.unshift(header);\n  return sheetData;\n};\n\nexport const objectToArray = obj => {\n  return Object.keys(obj).map(key => {\n    return { ...obj[key]\n    };\n  });\n};","map":{"version":3,"names":["saveAs","XlsxPopulate","getDimenssion","event","setfirst","file","img","target","files","Image","objectUrl","URL","createObjectURL","src","onload","width","naturalWidth","height","naturalHeight","validation","values","errors","name","email","test","age","isNaN","Number","city","phone","loginValidation","password","secondsToMinutes","time","Math","floor","toFixed","padStart","saveAsExcel","data","lngth","header","fromBlankAsync","then","workbook","sheet1","sheet","sheetData","getSheetData","totalColumns","length","cell","value","range","usedRange","endColumn","String","fromCharCode","row","style","outputAsync","res","Date","getTime","fields","Object","keys","map","fieldName","unshift","objectToArray","obj","key"],"sources":["/Users/stichtinghelden/Documents/GitHub/patient_0_eng/patient0eng/src/utils/helper.js"],"sourcesContent":["import { saveAs } from 'file-saver';\nimport XlsxPopulate from 'xlsx-populate';\n\nexport const getDimenssion = (event, setfirst) => {\n  var file, img;\n  file = event.target.files[0];\n  img = new Image();\n  var objectUrl = URL.createObjectURL(file);\n  img.src = objectUrl;\n  img.onload = function () {\n    setfirst({ width: img.naturalWidth, height: img.naturalHeight });\n  };\n};\n\nexport const validation = (values) => {\n  const errors = {};\n  if (!values.name) errors.name = 'Name is required';\n\n  if (!values.email) errors.email = 'Email is required';\n  else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  if (!values.age) errors.age = 'Age is required';\n  else if (isNaN(Number(values.age))) {\n    errors.age = 'Age must be a number';\n  }\n\n  if (!values.city) errors.city = 'City is required';\n\n  if (!values.phone) errors.phone = 'Phone is required';\n  else if (isNaN(Number(values.phone))) {\n    errors.phone = 'Phone must be a number';\n  }\n  return errors;\n};\nexport const loginValidation = (values) => {\n  const errors = {};\n  if (!values.email) errors.email = 'Email is required';\n  else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  if (!values.password) errors.password = 'Password is required';\n  return errors;\n};\n\nexport const secondsToMinutes = (time) => {\n  return (\n    Math.floor(time / 60).toFixed(0) +\n    ':' +\n    Math.floor(time % 60)\n      .toFixed(0)\n      .padStart(2, '0')\n  );\n};\n\nexport const saveAsExcel = (data) => {\n  if (data.lngth === 0) return;\n  let header = ['Age', 'City', 'Date', 'Email', 'Name', 'Phone', 'Room Id'];\n\n  XlsxPopulate.fromBlankAsync().then(async (workbook) => {\n    const sheet1 = workbook.sheet(0);\n    const sheetData = getSheetData(data, header);\n    const totalColumns = sheetData[0].length;\n\n    sheet1.cell('A1').value(sheetData);\n    const range = sheet1.usedRange();\n    const endColumn = String.fromCharCode(64 + totalColumns);\n    sheet1.row(1).style('bold', true);\n    sheet1.range('A1:' + endColumn + '1').style('fill', 'BFBFBF');\n    range.style('border', true);\n    workbook.outputAsync().then((res) => {\n      saveAs(res, `${new Date().getTime()}_game_users.xlsx`);\n    });\n    return false;\n  });\n};\n\nconst getSheetData = (data, header) => {\n  var fields = Object.keys(data[0]);\n  var sheetData = data.map(function (row) {\n    return fields.map(function (fieldName) {\n      return row[fieldName] ? row[fieldName] : '';\n    });\n  });\n  sheetData.unshift(header);\n  return sheetData;\n};\n\nexport const objectToArray = (obj) => {\n  return Object.keys(obj).map((key) => {\n    return {\n      ...obj[key],\n    };\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}