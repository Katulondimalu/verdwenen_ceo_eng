{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ModeValues;\n\n(function (ModeValues) {\n  ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n  ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n  ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n  ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n  ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n  ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n  ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n  ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n  ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n\n  ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n})(ModeValues = exports.ModeValues || (exports.ModeValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n * data can be encoded to bits in the QR code standard.</p>\n *\n * @author Sean Owen\n */\n\n\nvar Mode =\n/** @class */\nfunction () {\n  function Mode(value, stringValue, characterCountBitsForVersions, bits\n  /*int*/\n  ) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.characterCountBitsForVersions = characterCountBitsForVersions;\n    this.bits = bits;\n    Mode.FOR_BITS.set(bits, this);\n    Mode.FOR_VALUE.set(value, this);\n  }\n  /**\n   * @param bits four bits encoding a QR Code data mode\n   * @return Mode encoded by these bits\n   * @throws IllegalArgumentException if bits do not correspond to a known mode\n   */\n\n\n  Mode.forBits = function (bits\n  /*int*/\n  ) {\n    var mode = Mode.FOR_BITS.get(bits);\n\n    if (undefined === mode) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return mode;\n  };\n  /**\n   * @param version version in question\n   * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n   *         count of characters that will follow encoded in this Mode\n   */\n\n\n  Mode.prototype.getCharacterCountBits = function (version) {\n    var versionNumber = version.getVersionNumber();\n    var offset;\n\n    if (versionNumber <= 9) {\n      offset = 0;\n    } else if (versionNumber <= 26) {\n      offset = 1;\n    } else {\n      offset = 2;\n    }\n\n    return this.characterCountBitsForVersions[offset];\n  };\n\n  Mode.prototype.getValue = function () {\n    return this.value;\n  };\n\n  Mode.prototype.getBits = function () {\n    return this.bits;\n  };\n\n  Mode.prototype.equals = function (o) {\n    if (!(o instanceof Mode)) {\n      return false;\n    }\n\n    var other = o;\n    return this.value === other.value;\n  };\n\n  Mode.prototype.toString = function () {\n    return this.stringValue;\n  };\n\n  Mode.FOR_BITS = new Map();\n  Mode.FOR_VALUE = new Map();\n  Mode.TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n\n  Mode.NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n  Mode.ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n  Mode.STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n\n  Mode.BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n  Mode.ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n\n  Mode.KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n  Mode.FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n  Mode.FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n\n  Mode.HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n  return Mode;\n}();\n\nexports.default = Mode;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/Mode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ModeValues;\n(function (ModeValues) {\n    ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n    ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n    ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n    ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n    ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n    ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n    ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n    ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n    ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n    ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n})(ModeValues = exports.ModeValues || (exports.ModeValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n * data can be encoded to bits in the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar Mode = /** @class */ (function () {\n    function Mode(value, stringValue, characterCountBitsForVersions, bits /*int*/) {\n        this.value = value;\n        this.stringValue = stringValue;\n        this.characterCountBitsForVersions = characterCountBitsForVersions;\n        this.bits = bits;\n        Mode.FOR_BITS.set(bits, this);\n        Mode.FOR_VALUE.set(value, this);\n    }\n    /**\n     * @param bits four bits encoding a QR Code data mode\n     * @return Mode encoded by these bits\n     * @throws IllegalArgumentException if bits do not correspond to a known mode\n     */\n    Mode.forBits = function (bits /*int*/) {\n        var mode = Mode.FOR_BITS.get(bits);\n        if (undefined === mode) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return mode;\n    };\n    /**\n     * @param version version in question\n     * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n     *         count of characters that will follow encoded in this Mode\n     */\n    Mode.prototype.getCharacterCountBits = function (version) {\n        var versionNumber = version.getVersionNumber();\n        var offset;\n        if (versionNumber <= 9) {\n            offset = 0;\n        }\n        else if (versionNumber <= 26) {\n            offset = 1;\n        }\n        else {\n            offset = 2;\n        }\n        return this.characterCountBitsForVersions[offset];\n    };\n    Mode.prototype.getValue = function () {\n        return this.value;\n    };\n    Mode.prototype.getBits = function () {\n        return this.bits;\n    };\n    Mode.prototype.equals = function (o) {\n        if (!(o instanceof Mode)) {\n            return false;\n        }\n        var other = o;\n        return this.value === other.value;\n    };\n    Mode.prototype.toString = function () {\n        return this.stringValue;\n    };\n    Mode.FOR_BITS = new Map();\n    Mode.FOR_VALUE = new Map();\n    Mode.TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n    Mode.NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n    Mode.ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n    Mode.STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n    Mode.BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n    Mode.ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n    Mode.KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n    Mode.FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n    Mode.FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n    Mode.HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n    return Mode;\n}());\nexports.default = Mode;\n//# sourceMappingURL=Mode.js.map"]},"metadata":{},"sourceType":"script"}