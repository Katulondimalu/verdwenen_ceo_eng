{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar StringBuilder_1 = require(\"./util/StringBuilder\");\n\nvar UnsupportedOperationException_1 = require(\"./UnsupportedOperationException\");\n/*namespace com.google.zxing {*/\n\n/**\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\n * platforms into a standard interface for requesting greyscale luminance values. The interface\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\n * that one Reader does not modify the original luminance source and leave it in an unknown state\n * for other Readers in the chain.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar LuminanceSource =\n/** @class */\nfunction () {\n  function LuminanceSource(width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * @return The width of the bitmap.\n   */\n\n\n  LuminanceSource.prototype.getWidth = function () {\n    return this.width;\n  };\n  /**\n   * @return The height of the bitmap.\n   */\n\n\n  LuminanceSource.prototype.getHeight = function () {\n    return this.height;\n  };\n  /**\n   * @return Whether this subclass supports cropping.\n   */\n\n\n  LuminanceSource.prototype.isCropSupported = function () {\n    return false;\n  };\n  /**\n   * Returns a new object with cropped image data. Implementations may keep a reference to the\n   * original data rather than a copy. Only callable if isCropSupported() is true.\n   *\n   * @param left The left coordinate, which must be in [0,getWidth())\n   * @param top The top coordinate, which must be in [0,getHeight())\n   * @param width The width of the rectangle to crop.\n   * @param height The height of the rectangle to crop.\n   * @return A cropped version of this object.\n   */\n\n\n  LuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support cropping.');\n  };\n  /**\n   * @return Whether this subclass supports counter-clockwise rotation.\n   */\n\n\n  LuminanceSource.prototype.isRotateSupported = function () {\n    return false;\n  };\n  /**\n   * Returns a new object with rotated image data by 90 degrees counterclockwise.\n   * Only callable if {@link #isRotateSupported()} is true.\n   *\n   * @return A rotated version of this object.\n   */\n\n\n  LuminanceSource.prototype.rotateCounterClockwise = function () {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 90 degrees.');\n  };\n  /**\n   * Returns a new object with rotated image data by 45 degrees counterclockwise.\n   * Only callable if {@link #isRotateSupported()} is true.\n   *\n   * @return A rotated version of this object.\n   */\n\n\n  LuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 45 degrees.');\n  };\n  /*@Override*/\n\n\n  LuminanceSource.prototype.toString = function () {\n    var row = new Uint8ClampedArray(this.width);\n    var result = new StringBuilder_1.default();\n\n    for (var y = 0; y < this.height; y++) {\n      var sourceRow = this.getRow(y, row);\n\n      for (var x = 0; x < this.width; x++) {\n        var luminance = sourceRow[x] & 0xFF;\n        var c = void 0;\n\n        if (luminance < 0x40) {\n          c = '#';\n        } else if (luminance < 0x80) {\n          c = '+';\n        } else if (luminance < 0xC0) {\n          c = '.';\n        } else {\n          c = ' ';\n        }\n\n        result.append(c);\n      }\n\n      result.append('\\n');\n    }\n\n    return result.toString();\n  };\n\n  return LuminanceSource;\n}();\n\nexports.default = LuminanceSource;","map":{"version":3,"sources":["../../src/core/LuminanceSource.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAGH,IAAA,eAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,+BAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;AAEA;;AAEA;;;;;;;;AAQG;;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;EAEI,SAAA,eAAA,CAA8B;EAAc;EAA5C,EAA6D;EAAe;EAA5E,EAAmF;IAArD,KAAA,KAAA,GAAA,KAAA;IAA+B,KAAA,MAAA,GAAA,MAAA;EAA2B;EA0BxF;;AAEG;;;EACI,eAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;IACI,OAAO,KAAK,KAAZ;EACH,CAFM;EAIP;;AAEG;;;EACI,eAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;IACI,OAAO,KAAK,MAAZ;EACH,CAFM;EAIP;;AAEG;;;EACI,eAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;IACI,OAAO,KAAP;EACH,CAFM;EAIP;;;;;;;;;AASG;;;EACI,eAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY;EAAa;EAAzB,EAAkC;EAAY;EAA9C,EAAuD;EAAc;EAArE,EAA8E;EAAe;EAA7F,EAAoG;IAChG,MAAM,IAAI,+BAAA,CAAA,OAAJ,CAAkC,kDAAlC,CAAN;EACH,CAFM;EAIP;;AAEG;;;EACI,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;IACI,OAAO,KAAP;EACH,CAFM;EAUP;;;;;AAKG;;;EACI,eAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;IACI,MAAM,IAAI,+BAAA,CAAA,OAAJ,CAAkC,gEAAlC,CAAN;EACH,CAFM;EAIP;;;;;AAKG;;;EACI,eAAA,CAAA,SAAA,CAAA,wBAAA,GAAP,YAAA;IACI,MAAM,IAAI,+BAAA,CAAA,OAAJ,CAAkC,gEAAlC,CAAN;EACH,CAFM;EAIP;;;EACO,eAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;IACI,IAAM,GAAG,GAAG,IAAI,iBAAJ,CAAsB,KAAK,KAA3B,CAAZ;IACA,IAAI,MAAM,GAAG,IAAI,eAAA,CAAA,OAAJ,EAAb;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;MAClC,IAAM,SAAS,GAAG,KAAK,MAAL,CAAY,CAAZ,EAAe,GAAf,CAAlB;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,KAAzB,EAAgC,CAAC,EAAjC,EAAqC;QACjC,IAAM,SAAS,GAAG,SAAS,CAAC,CAAD,CAAT,GAAe,IAAjC;QACA,IAAI,CAAC,GAAA,KAAA,CAAL;;QACA,IAAI,SAAS,GAAG,IAAhB,EAAsB;UAClB,CAAC,GAAG,GAAJ;QACH,CAFD,MAEO,IAAI,SAAS,GAAG,IAAhB,EAAsB;UACzB,CAAC,GAAG,GAAJ;QACH,CAFM,MAEA,IAAI,SAAS,GAAG,IAAhB,EAAsB;UACzB,CAAC,GAAG,GAAJ;QACH,CAFM,MAEA;UACH,CAAC,GAAG,GAAJ;QACH;;QACD,MAAM,CAAC,MAAP,CAAc,CAAd;MACH;;MACD,MAAM,CAAC,MAAP,CAAc,IAAd;IACH;;IACD,OAAO,MAAM,CAAC,QAAP,EAAP;EACH,CAtBM;;EAwBX,OAAA,eAAA;AAAC,CAzHD,EAAA;;AA2HA,OAAA,CAAA,OAAA,GAAe,eAAf","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StringBuilder_1 = require(\"./util/StringBuilder\");\nvar UnsupportedOperationException_1 = require(\"./UnsupportedOperationException\");\n/*namespace com.google.zxing {*/\n/**\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\n * platforms into a standard interface for requesting greyscale luminance values. The interface\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\n * that one Reader does not modify the original luminance source and leave it in an unknown state\n * for other Readers in the chain.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar LuminanceSource = /** @class */ (function () {\n    function LuminanceSource(width /*int*/, height /*int*/) {\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * @return The width of the bitmap.\n     */\n    LuminanceSource.prototype.getWidth = function () {\n        return this.width;\n    };\n    /**\n     * @return The height of the bitmap.\n     */\n    LuminanceSource.prototype.getHeight = function () {\n        return this.height;\n    };\n    /**\n     * @return Whether this subclass supports cropping.\n     */\n    LuminanceSource.prototype.isCropSupported = function () {\n        return false;\n    };\n    /**\n     * Returns a new object with cropped image data. Implementations may keep a reference to the\n     * original data rather than a copy. Only callable if isCropSupported() is true.\n     *\n     * @param left The left coordinate, which must be in [0,getWidth())\n     * @param top The top coordinate, which must be in [0,getHeight())\n     * @param width The width of the rectangle to crop.\n     * @param height The height of the rectangle to crop.\n     * @return A cropped version of this object.\n     */\n    LuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support cropping.');\n    };\n    /**\n     * @return Whether this subclass supports counter-clockwise rotation.\n     */\n    LuminanceSource.prototype.isRotateSupported = function () {\n        return false;\n    };\n    /**\n     * Returns a new object with rotated image data by 90 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    LuminanceSource.prototype.rotateCounterClockwise = function () {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 90 degrees.');\n    };\n    /**\n     * Returns a new object with rotated image data by 45 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    LuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 45 degrees.');\n    };\n    /*@Override*/\n    LuminanceSource.prototype.toString = function () {\n        var row = new Uint8ClampedArray(this.width);\n        var result = new StringBuilder_1.default();\n        for (var y = 0; y < this.height; y++) {\n            var sourceRow = this.getRow(y, row);\n            for (var x = 0; x < this.width; x++) {\n                var luminance = sourceRow[x] & 0xFF;\n                var c = void 0;\n                if (luminance < 0x40) {\n                    c = '#';\n                }\n                else if (luminance < 0x80) {\n                    c = '+';\n                }\n                else if (luminance < 0xC0) {\n                    c = '.';\n                }\n                else {\n                    c = ' ';\n                }\n                result.append(c);\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    };\n    return LuminanceSource;\n}());\nexports.default = LuminanceSource;\n//# sourceMappingURL=LuminanceSource.js.map"]},"metadata":{},"sourceType":"script"}