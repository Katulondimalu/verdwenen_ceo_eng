{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar StringUtils_1 = require(\"../common/StringUtils\");\n\nvar StringBuilder =\n/** @class */\nfunction () {\n  function StringBuilder(value) {\n    if (value === void 0) {\n      value = '';\n    }\n\n    this.value = value;\n  }\n\n  StringBuilder.prototype.enableDecoding = function (encoding) {\n    this.encoding = encoding;\n    return this;\n  };\n\n  StringBuilder.prototype.append = function (s) {\n    if (typeof s === 'string') {\n      this.value += s.toString();\n    } else if (this.encoding) {\n      // use passed format (fromCharCode will return UTF8 encoding)\n      this.value += StringUtils_1.default.castAsNonUtf8Char(s, this.encoding);\n    } else {\n      // correctly converts from UTF-8, but not other encodings\n      this.value += String.fromCharCode(s);\n    }\n\n    return this;\n  };\n\n  StringBuilder.prototype.length = function () {\n    return this.value.length;\n  };\n\n  StringBuilder.prototype.charAt = function (n) {\n    return this.value.charAt(n);\n  };\n\n  StringBuilder.prototype.deleteCharAt = function (n) {\n    this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n  };\n\n  StringBuilder.prototype.setCharAt = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n  };\n\n  StringBuilder.prototype.substring = function (start, end) {\n    return this.value.substring(start, end);\n  };\n  /**\n   * @note helper method for RSS Expanded\n   */\n\n\n  StringBuilder.prototype.setLengthToZero = function () {\n    this.value = \"\";\n  };\n\n  StringBuilder.prototype.toString = function () {\n    return this.value;\n  };\n\n  StringBuilder.prototype.insert = function (n, c) {\n    this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n  };\n\n  return StringBuilder;\n}();\n\nexports.default = StringBuilder;","map":{"version":3,"sources":["../../../src/core/util/StringBuilder.ts"],"names":[],"mappings":";;;;;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAGA,IAAA,aAAA;AAAA;AAAA,YAAA;EAIE,SAAA,aAAA,CAA2B,KAA3B,EAA6C;IAAlB,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAAA,EAAA;IAAkB;;IAAlB,KAAA,KAAA,GAAA,KAAA;EAAsB;;EAE1C,aAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,QAAtB,EAA+C;IAC7C,KAAK,QAAL,GAAgB,QAAhB;IACA,OAAO,IAAP;EACD,CAHM;;EAKA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,CAAd,EAAgC;IAC9B,IAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;MACzB,KAAK,KAAL,IAAc,CAAC,CAAC,QAAF,EAAd;IACD,CAFD,MAEO,IAAI,KAAK,QAAT,EAAmB;MACxB;MACA,KAAK,KAAL,IAAc,aAAA,CAAA,OAAA,CAAY,iBAAZ,CAA8B,CAA9B,EAAiC,KAAK,QAAtC,CAAd;IACD,CAHM,MAGA;MACL;MACA,KAAK,KAAL,IAAc,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAd;IACD;;IACD,OAAO,IAAP;EACD,CAXM;;EAaA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACE,OAAO,KAAK,KAAL,CAAW,MAAlB;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,CAAd,EAAuB;IACrB,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,CAAP;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,CAApB,EAA6B;IAC3B,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,CAArB,IAA0B,KAAK,KAAL,CAAW,SAAX,CAAqB,CAAC,GAAG,CAAzB,CAAvC;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,CAAjB,EAA4B,CAA5B,EAAqC;IACnC,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,CAArB,IAA0B,CAA1B,GAA8B,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAC,GAAG,CAAtB,CAA3C;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B,GAA7B,EAAqC;IACnC,OAAO,KAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,EAA4B,GAA5B,CAAP;EACD,CAFM;EAIP;;AAEG;;;EACI,aAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;IACI,KAAK,KAAL,GAAa,EAAb;EACH,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;IACE,OAAO,KAAK,KAAZ;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,CAAd,EAAyB,CAAzB,EAAkC;IAChC,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,CAArB,IAA0B,CAA1B,GAA8B,KAAK,KAAL,CAAW,MAAX,CAAkB,CAAC,GAAG,CAAC,CAAC,MAAxB,CAA3C;EACD,CAFM;;EAGT,OAAA,aAAA;AAAC,CA1DD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StringUtils_1 = require(\"../common/StringUtils\");\nvar StringBuilder = /** @class */ (function () {\n    function StringBuilder(value) {\n        if (value === void 0) { value = ''; }\n        this.value = value;\n    }\n    StringBuilder.prototype.enableDecoding = function (encoding) {\n        this.encoding = encoding;\n        return this;\n    };\n    StringBuilder.prototype.append = function (s) {\n        if (typeof s === 'string') {\n            this.value += s.toString();\n        }\n        else if (this.encoding) {\n            // use passed format (fromCharCode will return UTF8 encoding)\n            this.value += StringUtils_1.default.castAsNonUtf8Char(s, this.encoding);\n        }\n        else {\n            // correctly converts from UTF-8, but not other encodings\n            this.value += String.fromCharCode(s);\n        }\n        return this;\n    };\n    StringBuilder.prototype.length = function () {\n        return this.value.length;\n    };\n    StringBuilder.prototype.charAt = function (n) {\n        return this.value.charAt(n);\n    };\n    StringBuilder.prototype.deleteCharAt = function (n) {\n        this.value = this.value.substr(0, n) + this.value.substring(n + 1);\n    };\n    StringBuilder.prototype.setCharAt = function (n, c) {\n        this.value = this.value.substr(0, n) + c + this.value.substr(n + 1);\n    };\n    StringBuilder.prototype.substring = function (start, end) {\n        return this.value.substring(start, end);\n    };\n    /**\n     * @note helper method for RSS Expanded\n     */\n    StringBuilder.prototype.setLengthToZero = function () {\n        this.value = \"\";\n    };\n    StringBuilder.prototype.toString = function () {\n        return this.value;\n    };\n    StringBuilder.prototype.insert = function (n, c) {\n        this.value = this.value.substr(0, n) + c + this.value.substr(n + c.length);\n    };\n    return StringBuilder;\n}());\nexports.default = StringBuilder;\n//# sourceMappingURL=StringBuilder.js.map"]},"metadata":{},"sourceType":"script"}