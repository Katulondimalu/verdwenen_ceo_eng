{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\n\n\nvar AbstractGenericGF =\n/** @class */\nfunction () {\n  function AbstractGenericGF() {}\n  /**\n   * @return 2 to the power of a in GF(size)\n   */\n\n\n  AbstractGenericGF.prototype.exp = function (a) {\n    return this.expTable[a];\n  };\n  /**\n   * @return base 2 log of a in GF(size)\n   */\n\n\n  AbstractGenericGF.prototype.log = function (a\n  /*int*/\n  ) {\n    if (a === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return this.logTable[a];\n  };\n  /**\n   * Implements both addition and subtraction -- they are the same in GF(size).\n   *\n   * @return sum/difference of a and b\n   */\n\n\n  AbstractGenericGF.addOrSubtract = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    return a ^ b;\n  };\n\n  return AbstractGenericGF;\n}();\n\nexports.default = AbstractGenericGF;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/AbstractGenericGF.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAOH,IAAA,0BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAGA;;;;;;;;;;AAUG;;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,iBAAA,GAAA,CAyCC;EA5BC;;AAEG;;;EACI,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,CAAX,EAAoB;IAClB,OAAO,KAAK,QAAL,CAAc,CAAd,CAAP;EACD,CAFM;EAIP;;AAEG;;;EACI,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW;EAAU;EAArB,EAA4B;IAC1B,IAAI,CAAC,KAAK,CAAV,EAAa;MACX,MAAM,IAAI,0BAAA,CAAA,OAAJ,EAAN;IACD;;IACD,OAAO,KAAK,QAAL,CAAc,CAAd,CAAP;EACD,CALM;EAOP;;;;AAIG;;;EACW,iBAAA,CAAA,aAAA,GAAd,UACE;EAAU;EADZ,EAEE;EAAU;EAFZ,EAEmB;IAEjB,OAAO,CAAC,GAAG,CAAX;EACD,CALa;;EAMhB,OAAA,iBAAA;AAAC,CAzCD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\nvar AbstractGenericGF = /** @class */ (function () {\n    function AbstractGenericGF() {\n    }\n    /**\n     * @return 2 to the power of a in GF(size)\n     */\n    AbstractGenericGF.prototype.exp = function (a) {\n        return this.expTable[a];\n    };\n    /**\n     * @return base 2 log of a in GF(size)\n     */\n    AbstractGenericGF.prototype.log = function (a /*int*/) {\n        if (a === 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return this.logTable[a];\n    };\n    /**\n     * Implements both addition and subtraction -- they are the same in GF(size).\n     *\n     * @return sum/difference of a and b\n     */\n    AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\n        return a ^ b;\n    };\n    return AbstractGenericGF;\n}());\nexports.default = AbstractGenericGF;\n//# sourceMappingURL=AbstractGenericGF.js.map"]},"metadata":{},"sourceType":"script"}