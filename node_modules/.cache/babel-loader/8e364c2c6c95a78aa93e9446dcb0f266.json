{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\n\n\nvar DataBlock =\n/** @class */\nfunction () {\n  function DataBlock(numDataCodewords, codewords) {\n    this.numDataCodewords = numDataCodewords;\n    this.codewords = codewords;\n  }\n  /**\n   * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.\n   * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n   * method will separate the data into original blocks.</p>\n   *\n   * @param rawCodewords bytes as read directly from the Data Matrix Code\n   * @param version version of the Data Matrix Code\n   * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n   *         Data Matrix Code\n   */\n\n\n  DataBlock.getDataBlocks = function (rawCodewords, version) {\n    var e_1, _a, e_2, _b; // Figure out the number and size of data blocks used by this version\n\n\n    var ecBlocks = version.getECBlocks(); // First count the total number of data blocks\n\n    var totalBlocks = 0;\n    var ecBlockArray = ecBlocks.getECBlocks();\n\n    try {\n      for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n        var ecBlock = ecBlockArray_1_1.value;\n        totalBlocks += ecBlock.getCount();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // Now establish DataBlocks of the appropriate size and number of data codewords\n\n\n    var result = new Array(totalBlocks);\n    var numResultBlocks = 0;\n\n    try {\n      for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n        var ecBlock = ecBlockArray_2_1.value;\n\n        for (var i = 0; i < ecBlock.getCount(); i++) {\n          var numDataCodewords = ecBlock.getDataCodewords();\n          var numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;\n          result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // All blocks have the same amount of data, except that the last n\n    // (where n may be 0) have 1 less byte. Figure out where these start.\n    // TODO(bbrown): There is only one case where there is a difference for Data Matrix for size 144\n\n\n    var longerBlocksTotalCodewords = result[0].codewords.length; // int shorterBlocksTotalCodewords = longerBlocksTotalCodewords - 1;\n\n    var longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n    var shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1; // The last elements of result may be 1 element shorter for 144 matrix\n    // first fill out as many elements as all of them have minus 1\n\n    var rawCodewordsOffset = 0;\n\n    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n      }\n    } // Fill out the last data block in the longer ones\n\n\n    var specialVersion = version.getVersionNumber() === 24;\n    var numLongerBlocks = specialVersion ? 8 : numResultBlocks;\n\n    for (var j = 0; j < numLongerBlocks; j++) {\n      result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];\n    } // Now add in error correction blocks\n\n\n    var max = result[0].codewords.length;\n\n    for (var i = longerBlocksNumDataCodewords; i < max; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        var jOffset = specialVersion ? (j + 8) % numResultBlocks : j;\n        var iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n        result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\n\n    if (rawCodewordsOffset !== rawCodewords.length) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return result;\n  };\n\n  DataBlock.prototype.getNumDataCodewords = function () {\n    return this.numDataCodewords;\n  };\n\n  DataBlock.prototype.getCodewords = function () {\n    return this.codewords;\n  };\n\n  return DataBlock;\n}();\n\nexports.default = DataBlock;","map":{"version":3,"sources":["../../../../src/core/datamatrix/decoder/DataBlock.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\nvar DataBlock = /** @class */ (function () {\n    function DataBlock(numDataCodewords, codewords) {\n        this.numDataCodewords = numDataCodewords;\n        this.codewords = codewords;\n    }\n    /**\n     * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.\n     * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n     * method will separate the data into original blocks.</p>\n     *\n     * @param rawCodewords bytes as read directly from the Data Matrix Code\n     * @param version version of the Data Matrix Code\n     * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n     *         Data Matrix Code\n     */\n    DataBlock.getDataBlocks = function (rawCodewords, version) {\n        var e_1, _a, e_2, _b;\n        // Figure out the number and size of data blocks used by this version\n        var ecBlocks = version.getECBlocks();\n        // First count the total number of data blocks\n        var totalBlocks = 0;\n        var ecBlockArray = ecBlocks.getECBlocks();\n        try {\n            for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n                var ecBlock = ecBlockArray_1_1.value;\n                totalBlocks += ecBlock.getCount();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Now establish DataBlocks of the appropriate size and number of data codewords\n        var result = new Array(totalBlocks);\n        var numResultBlocks = 0;\n        try {\n            for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n                var ecBlock = ecBlockArray_2_1.value;\n                for (var i = 0; i < ecBlock.getCount(); i++) {\n                    var numDataCodewords = ecBlock.getDataCodewords();\n                    var numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // All blocks have the same amount of data, except that the last n\n        // (where n may be 0) have 1 less byte. Figure out where these start.\n        // TODO(bbrown): There is only one case where there is a difference for Data Matrix for size 144\n        var longerBlocksTotalCodewords = result[0].codewords.length;\n        // int shorterBlocksTotalCodewords = longerBlocksTotalCodewords - 1;\n        var longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n        var shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1;\n        // The last elements of result may be 1 element shorter for 144 matrix\n        // first fill out as many elements as all of them have minus 1\n        var rawCodewordsOffset = 0;\n        for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        // Fill out the last data block in the longer ones\n        var specialVersion = version.getVersionNumber() === 24;\n        var numLongerBlocks = specialVersion ? 8 : numResultBlocks;\n        for (var j = 0; j < numLongerBlocks; j++) {\n            result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];\n        }\n        // Now add in error correction blocks\n        var max = result[0].codewords.length;\n        for (var i = longerBlocksNumDataCodewords; i < max; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                var jOffset = specialVersion ? (j + 8) % numResultBlocks : j;\n                var iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n                result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        if (rawCodewordsOffset !== rawCodewords.length) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return result;\n    };\n    DataBlock.prototype.getNumDataCodewords = function () {\n        return this.numDataCodewords;\n    };\n    DataBlock.prototype.getCodewords = function () {\n        return this.codewords;\n    };\n    return DataBlock;\n}());\nexports.default = DataBlock;\n//# sourceMappingURL=DataBlock.js.map"]},"metadata":{},"sourceType":"script"}