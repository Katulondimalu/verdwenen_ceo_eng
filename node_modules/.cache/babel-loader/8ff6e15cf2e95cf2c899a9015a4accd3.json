{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst RELATIONSHIP_SCHEMA_PREFIX = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\";\n/**\n * A relationship collection.\n * @ignore\n */\n\nclass Relationships {\n  /**\n   * Creates a new instance of _Relationships.\n   * @param {{}} node - The node.\n   */\n  constructor(node) {\n    this._init(node);\n\n    this._getStartingId();\n  }\n  /**\n   * Add a new relationship.\n   * @param {string} type - The type of relationship.\n   * @param {string} target - The target of the relationship.\n   * @param {string} [targetMode] - The target mode of the relationship.\n   * @returns {{}} The new relationship.\n   */\n\n\n  add(type, target, targetMode) {\n    const node = {\n      name: \"Relationship\",\n      attributes: {\n        Id: `rId${this._nextId++}`,\n        Type: `${RELATIONSHIP_SCHEMA_PREFIX}${type}`,\n        Target: target\n      }\n    };\n\n    if (targetMode) {\n      node.attributes.TargetMode = targetMode;\n    }\n\n    this._node.children.push(node);\n\n    return node;\n  }\n  /**\n   * Find a relationship by ID.\n   * @param {string} id - The relationship ID.\n   * @returns {{}|undefined} The matching relationship or undefined if not found.\n   */\n\n\n  findById(id) {\n    return _.find(this._node.children, node => node.attributes.Id === id);\n  }\n  /**\n   * Find a relationship by type.\n   * @param {string} type - The type to search for.\n   * @returns {{}|undefined} The matching relationship or undefined if not found.\n   */\n\n\n  findByType(type) {\n    return _.find(this._node.children, node => node.attributes.Type === `${RELATIONSHIP_SCHEMA_PREFIX}${type}`);\n  }\n  /**\n   * Convert the collection to an XML object.\n   * @returns {{}|undefined} The XML or undefined if empty.\n   */\n\n\n  toXml() {\n    if (!this._node.children.length) return;\n    return this._node;\n  }\n  /**\n   * Get the starting relationship ID to use for new relationships.\n   * @private\n   * @returns {undefined}\n   */\n\n\n  _getStartingId() {\n    this._nextId = 1;\n\n    this._node.children.forEach(node => {\n      const id = parseInt(node.attributes.Id.substr(3));\n      if (id >= this._nextId) this._nextId = id + 1;\n    });\n  }\n  /**\n   * Initialize the node.\n   * @param {{}} [node] - The relationships node.\n   * @private\n   * @returns {undefined}\n   */\n\n\n  _init(node) {\n    if (!node) node = {\n      name: \"Relationships\",\n      attributes: {\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n      },\n      children: []\n    };\n    this._node = node;\n  }\n\n}\n\nmodule.exports = Relationships;\n/*\nxl/_rels/workbook.xml.rels\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n    <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>\n    <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>\n    <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>\n    <Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/calcChain\" Target=\"calcChain.xml\"/>\n    <Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\"/>\n</Relationships>\n*/","map":{"version":3,"names":["_","require","RELATIONSHIP_SCHEMA_PREFIX","Relationships","constructor","node","_init","_getStartingId","add","type","target","targetMode","name","attributes","Id","_nextId","Type","Target","TargetMode","_node","children","push","findById","id","find","findByType","toXml","length","forEach","parseInt","substr","xmlns","module","exports"],"sources":["/Users/stichtinghelden/Documents/GitHub/patient_0_eng/patient0eng/node_modules/xlsx-populate/lib/Relationships.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst RELATIONSHIP_SCHEMA_PREFIX = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\";\n\n/**\n * A relationship collection.\n * @ignore\n */\nclass Relationships {\n    /**\n     * Creates a new instance of _Relationships.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._init(node);\n        this._getStartingId();\n    }\n\n    /**\n     * Add a new relationship.\n     * @param {string} type - The type of relationship.\n     * @param {string} target - The target of the relationship.\n     * @param {string} [targetMode] - The target mode of the relationship.\n     * @returns {{}} The new relationship.\n     */\n    add(type, target, targetMode) {\n        const node = {\n            name: \"Relationship\",\n            attributes: {\n                Id: `rId${this._nextId++}`,\n                Type: `${RELATIONSHIP_SCHEMA_PREFIX}${type}`,\n                Target: target\n            }\n        };\n\n        if (targetMode) {\n            node.attributes.TargetMode = targetMode;\n        }\n\n        this._node.children.push(node);\n        return node;\n    }\n\n    /**\n     * Find a relationship by ID.\n     * @param {string} id - The relationship ID.\n     * @returns {{}|undefined} The matching relationship or undefined if not found.\n     */\n    findById(id) {\n        return _.find(this._node.children, node => node.attributes.Id === id);\n    }\n\n    /**\n     * Find a relationship by type.\n     * @param {string} type - The type to search for.\n     * @returns {{}|undefined} The matching relationship or undefined if not found.\n     */\n    findByType(type) {\n        return _.find(this._node.children, node => node.attributes.Type === `${RELATIONSHIP_SCHEMA_PREFIX}${type}`);\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}|undefined} The XML or undefined if empty.\n     */\n    toXml() {\n        if (!this._node.children.length) return;\n        return this._node;\n    }\n\n    /**\n     * Get the starting relationship ID to use for new relationships.\n     * @private\n     * @returns {undefined}\n     */\n    _getStartingId() {\n        this._nextId = 1;\n        this._node.children.forEach(node => {\n            const id = parseInt(node.attributes.Id.substr(3));\n            if (id >= this._nextId) this._nextId = id + 1;\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The relationships node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"Relationships\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n            },\n            children: []\n        };\n\n        this._node = node;\n    }\n}\n\nmodule.exports = Relationships;\n\n/*\nxl/_rels/workbook.xml.rels\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n    <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>\n    <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>\n    <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>\n    <Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/calcChain\" Target=\"calcChain.xml\"/>\n    <Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\"/>\n</Relationships>\n*/\n\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMC,0BAA0B,GAAG,sEAAnC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;EAChB;AACJ;AACA;AACA;EACIC,WAAW,CAACC,IAAD,EAAO;IACd,KAAKC,KAAL,CAAWD,IAAX;;IACA,KAAKE,cAAL;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,UAAf,EAA2B;IAC1B,MAAMN,IAAI,GAAG;MACTO,IAAI,EAAE,cADG;MAETC,UAAU,EAAE;QACRC,EAAE,EAAG,MAAK,KAAKC,OAAL,EAAe,EADjB;QAERC,IAAI,EAAG,GAAEd,0BAA2B,GAAEO,IAAK,EAFnC;QAGRQ,MAAM,EAAEP;MAHA;IAFH,CAAb;;IASA,IAAIC,UAAJ,EAAgB;MACZN,IAAI,CAACQ,UAAL,CAAgBK,UAAhB,GAA6BP,UAA7B;IACH;;IAED,KAAKQ,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBhB,IAAzB;;IACA,OAAOA,IAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIiB,QAAQ,CAACC,EAAD,EAAK;IACT,OAAOvB,CAAC,CAACwB,IAAF,CAAO,KAAKL,KAAL,CAAWC,QAAlB,EAA4Bf,IAAI,IAAIA,IAAI,CAACQ,UAAL,CAAgBC,EAAhB,KAAuBS,EAA3D,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIE,UAAU,CAAChB,IAAD,EAAO;IACb,OAAOT,CAAC,CAACwB,IAAF,CAAO,KAAKL,KAAL,CAAWC,QAAlB,EAA4Bf,IAAI,IAAIA,IAAI,CAACQ,UAAL,CAAgBG,IAAhB,KAA0B,GAAEd,0BAA2B,GAAEO,IAAK,EAAlG,CAAP;EACH;EAED;AACJ;AACA;AACA;;;EACIiB,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKP,KAAL,CAAWC,QAAX,CAAoBO,MAAzB,EAAiC;IACjC,OAAO,KAAKR,KAAZ;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIZ,cAAc,GAAG;IACb,KAAKQ,OAAL,GAAe,CAAf;;IACA,KAAKI,KAAL,CAAWC,QAAX,CAAoBQ,OAApB,CAA4BvB,IAAI,IAAI;MAChC,MAAMkB,EAAE,GAAGM,QAAQ,CAACxB,IAAI,CAACQ,UAAL,CAAgBC,EAAhB,CAAmBgB,MAAnB,CAA0B,CAA1B,CAAD,CAAnB;MACA,IAAIP,EAAE,IAAI,KAAKR,OAAf,EAAwB,KAAKA,OAAL,GAAeQ,EAAE,GAAG,CAApB;IAC3B,CAHD;EAIH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIjB,KAAK,CAACD,IAAD,EAAO;IACR,IAAI,CAACA,IAAL,EAAWA,IAAI,GAAG;MACdO,IAAI,EAAE,eADQ;MAEdC,UAAU,EAAE;QACRkB,KAAK,EAAE;MADC,CAFE;MAKdX,QAAQ,EAAE;IALI,CAAP;IAQX,KAAKD,KAAL,GAAad,IAAb;EACH;;AA3Fe;;AA8FpB2B,MAAM,CAACC,OAAP,GAAiB9B,aAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}