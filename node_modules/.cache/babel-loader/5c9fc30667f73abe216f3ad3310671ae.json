{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\n\n\nvar FormatInformation =\n/** @class */\nfunction () {\n  function FormatInformation(formatInfo\n  /*int*/\n  ) {\n    // Bits 3,4\n    this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits(formatInfo >> 3 & 0x03); // Bottom 3 bits\n\n    this.dataMask =\n    /*(byte) */\n    formatInfo & 0x07;\n  }\n\n  FormatInformation.numBitsDiffering = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    return Integer_1.default.bitCount(a ^ b);\n  };\n  /**\n   * @param maskedFormatInfo1 format info indicator, with mask still applied\n   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n   *  to establish best match\n   * @return information about the format it specifies, or {@code null}\n   *  if doesn't seem to match any known pattern\n   */\n\n\n  FormatInformation.decodeFormatInformation = function (maskedFormatInfo1\n  /*int*/\n  , maskedFormatInfo2\n  /*int*/\n  ) {\n    var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n\n    if (formatInfo !== null) {\n      return formatInfo;\n    } // Should return null, but, some QR codes apparently\n    // do not mask this info. Try again by actually masking the pattern\n    // first\n\n\n    return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n  };\n\n  FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1\n  /*int*/\n  , maskedFormatInfo2\n  /*int*/\n  ) {\n    var e_1, _a; // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n\n\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestFormatInfo = 0;\n\n    try {\n      for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var decodeInfo = _c.value;\n        var targetInfo = decodeInfo[0];\n\n        if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n          // Found an exact match\n          return new FormatInformation(decodeInfo[1]);\n        }\n\n        var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n\n        if (bitsDifference < bestDifference) {\n          bestFormatInfo = decodeInfo[1];\n          bestDifference = bitsDifference;\n        }\n\n        if (maskedFormatInfo1 !== maskedFormatInfo2) {\n          // also try the other option\n          bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n\n          if (bitsDifference < bestDifference) {\n            bestFormatInfo = decodeInfo[1];\n            bestDifference = bitsDifference;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n    // differing means we found a match\n\n\n    if (bestDifference <= 3) {\n      return new FormatInformation(bestFormatInfo);\n    }\n\n    return null;\n  };\n\n  FormatInformation.prototype.getErrorCorrectionLevel = function () {\n    return this.errorCorrectionLevel;\n  };\n\n  FormatInformation.prototype.getDataMask = function () {\n    return this.dataMask;\n  };\n  /*@Override*/\n\n\n  FormatInformation.prototype.hashCode = function () {\n    return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;\n  };\n  /*@Override*/\n\n\n  FormatInformation.prototype.equals = function (o) {\n    if (!(o instanceof FormatInformation)) {\n      return false;\n    }\n\n    var other = o;\n    return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;\n  };\n\n  FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n  /**\n   * See ISO 18004:2006, Annex C, Table C.1\n   */\n\n  FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [Int32Array.from([0x5412, 0x00]), Int32Array.from([0x5125, 0x01]), Int32Array.from([0x5E7C, 0x02]), Int32Array.from([0x5B4B, 0x03]), Int32Array.from([0x45F9, 0x04]), Int32Array.from([0x40CE, 0x05]), Int32Array.from([0x4F97, 0x06]), Int32Array.from([0x4AA0, 0x07]), Int32Array.from([0x77C4, 0x08]), Int32Array.from([0x72F3, 0x09]), Int32Array.from([0x7DAA, 0x0A]), Int32Array.from([0x789D, 0x0B]), Int32Array.from([0x662F, 0x0C]), Int32Array.from([0x6318, 0x0D]), Int32Array.from([0x6C41, 0x0E]), Int32Array.from([0x6976, 0x0F]), Int32Array.from([0x1689, 0x10]), Int32Array.from([0x13BE, 0x11]), Int32Array.from([0x1CE7, 0x12]), Int32Array.from([0x19D0, 0x13]), Int32Array.from([0x0762, 0x14]), Int32Array.from([0x0255, 0x15]), Int32Array.from([0x0D0C, 0x16]), Int32Array.from([0x083B, 0x17]), Int32Array.from([0x355F, 0x18]), Int32Array.from([0x3068, 0x19]), Int32Array.from([0x3F31, 0x1A]), Int32Array.from([0x3A06, 0x1B]), Int32Array.from([0x24B4, 0x1C]), Int32Array.from([0x2183, 0x1D]), Int32Array.from([0x2EDA, 0x1E]), Int32Array.from([0x2BED, 0x1F])];\n  return FormatInformation;\n}();\n\nexports.default = FormatInformation;","map":{"version":3,"sources":["../../../../src/core/qrcode/decoder/FormatInformation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.decoder {*/\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\nvar FormatInformation = /** @class */ (function () {\n    function FormatInformation(formatInfo /*int*/) {\n        // Bits 3,4\n        this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits((formatInfo >> 3) & 0x03);\n        // Bottom 3 bits\n        this.dataMask = /*(byte) */ (formatInfo & 0x07);\n    }\n    FormatInformation.numBitsDiffering = function (a /*int*/, b /*int*/) {\n        return Integer_1.default.bitCount(a ^ b);\n    };\n    /**\n     * @param maskedFormatInfo1 format info indicator, with mask still applied\n     * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n     *  to establish best match\n     * @return information about the format it specifies, or {@code null}\n     *  if doesn't seem to match any known pattern\n     */\n    FormatInformation.decodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n        var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n        if (formatInfo !== null) {\n            return formatInfo;\n        }\n        // Should return null, but, some QR codes apparently\n        // do not mask this info. Try again by actually masking the pattern\n        // first\n        return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n    };\n    FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1 /*int*/, maskedFormatInfo2 /*int*/) {\n        var e_1, _a;\n        // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n        var bestDifference = Number.MAX_SAFE_INTEGER;\n        var bestFormatInfo = 0;\n        try {\n            for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var decodeInfo = _c.value;\n                var targetInfo = decodeInfo[0];\n                if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n                    // Found an exact match\n                    return new FormatInformation(decodeInfo[1]);\n                }\n                var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n                if (bitsDifference < bestDifference) {\n                    bestFormatInfo = decodeInfo[1];\n                    bestDifference = bitsDifference;\n                }\n                if (maskedFormatInfo1 !== maskedFormatInfo2) {\n                    // also try the other option\n                    bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n                    if (bitsDifference < bestDifference) {\n                        bestFormatInfo = decodeInfo[1];\n                        bestDifference = bitsDifference;\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n        // differing means we found a match\n        if (bestDifference <= 3) {\n            return new FormatInformation(bestFormatInfo);\n        }\n        return null;\n    };\n    FormatInformation.prototype.getErrorCorrectionLevel = function () {\n        return this.errorCorrectionLevel;\n    };\n    FormatInformation.prototype.getDataMask = function () {\n        return this.dataMask;\n    };\n    /*@Override*/\n    FormatInformation.prototype.hashCode = function () {\n        return (this.errorCorrectionLevel.getBits() << 3) | this.dataMask;\n    };\n    /*@Override*/\n    FormatInformation.prototype.equals = function (o) {\n        if (!(o instanceof FormatInformation)) {\n            return false;\n        }\n        var other = o;\n        return this.errorCorrectionLevel === other.errorCorrectionLevel &&\n            this.dataMask === other.dataMask;\n    };\n    FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n    /**\n     * See ISO 18004:2006, Annex C, Table C.1\n     */\n    FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [\n        Int32Array.from([0x5412, 0x00]),\n        Int32Array.from([0x5125, 0x01]),\n        Int32Array.from([0x5E7C, 0x02]),\n        Int32Array.from([0x5B4B, 0x03]),\n        Int32Array.from([0x45F9, 0x04]),\n        Int32Array.from([0x40CE, 0x05]),\n        Int32Array.from([0x4F97, 0x06]),\n        Int32Array.from([0x4AA0, 0x07]),\n        Int32Array.from([0x77C4, 0x08]),\n        Int32Array.from([0x72F3, 0x09]),\n        Int32Array.from([0x7DAA, 0x0A]),\n        Int32Array.from([0x789D, 0x0B]),\n        Int32Array.from([0x662F, 0x0C]),\n        Int32Array.from([0x6318, 0x0D]),\n        Int32Array.from([0x6C41, 0x0E]),\n        Int32Array.from([0x6976, 0x0F]),\n        Int32Array.from([0x1689, 0x10]),\n        Int32Array.from([0x13BE, 0x11]),\n        Int32Array.from([0x1CE7, 0x12]),\n        Int32Array.from([0x19D0, 0x13]),\n        Int32Array.from([0x0762, 0x14]),\n        Int32Array.from([0x0255, 0x15]),\n        Int32Array.from([0x0D0C, 0x16]),\n        Int32Array.from([0x083B, 0x17]),\n        Int32Array.from([0x355F, 0x18]),\n        Int32Array.from([0x3068, 0x19]),\n        Int32Array.from([0x3F31, 0x1A]),\n        Int32Array.from([0x3A06, 0x1B]),\n        Int32Array.from([0x24B4, 0x1C]),\n        Int32Array.from([0x2183, 0x1D]),\n        Int32Array.from([0x2EDA, 0x1E]),\n        Int32Array.from([0x2BED, 0x1F]),\n    ];\n    return FormatInformation;\n}());\nexports.default = FormatInformation;\n//# sourceMappingURL=FormatInformation.js.map"]},"metadata":{},"sourceType":"script"}