{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode {*/\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar EncodeHintType_1 = require(\"../EncodeHintType\");\n\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\n\nvar ErrorCorrectionLevel_1 = require(\"./decoder/ErrorCorrectionLevel\");\n\nvar Encoder_1 = require(\"./encoder/Encoder\");\n\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n\nvar IllegalStateException_1 = require(\"../IllegalStateException\");\n/*import java.util.Map;*/\n\n/**\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar QRCodeWriter =\n/** @class */\nfunction () {\n  function QRCodeWriter() {}\n  /*@Override*/\n  // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n  //     /*throws WriterException */ {\n  //   return encode(contents, format, width, height, null)\n  // }\n\n  /*@Override*/\n\n\n  QRCodeWriter.prototype.encode = function (contents, format, width\n  /*int*/\n  , height\n  /*int*/\n  , hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    }\n\n    if (format !== BarcodeFormat_1.default.QR_CODE) {\n      throw new IllegalArgumentException_1.default('Can only encode QR_CODE, but got ' + format);\n    }\n\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default(\"Requested dimensions are too small: \" + width + \"x\" + height);\n    }\n\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return QRCodeWriter.renderResult(code, width, height, quietZone);\n  }; // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n  // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n\n\n  QRCodeWriter.renderResult = function (code, width\n  /*int*/\n  , height\n  /*int*/\n  , quietZone\n  /*int*/\n  ) {\n    var input = code.getMatrix();\n\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight)); // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var output = new BitMatrix_1.default(outputWidth, outputHeight);\n\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          output.setRegion(outputX, outputY, multiple, multiple);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  QRCodeWriter.QUIET_ZONE_SIZE = 4;\n  return QRCodeWriter;\n}();\n\nexports.default = QRCodeWriter;","map":{"version":3,"sources":["../../../src/core/qrcode/QRCodeWriter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar EncodeHintType_1 = require(\"../EncodeHintType\");\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\nvar ErrorCorrectionLevel_1 = require(\"./decoder/ErrorCorrectionLevel\");\nvar Encoder_1 = require(\"./encoder/Encoder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../IllegalStateException\");\n/*import java.util.Map;*/\n/**\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar QRCodeWriter = /** @class */ (function () {\n    function QRCodeWriter() {\n    }\n    /*@Override*/\n    // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n    //     /*throws WriterException */ {\n    //   return encode(contents, format, width, height, null)\n    // }\n    /*@Override*/\n    QRCodeWriter.prototype.encode = function (contents, format, width /*int*/, height /*int*/, hints) {\n        if (contents.length === 0) {\n            throw new IllegalArgumentException_1.default('Found empty contents');\n        }\n        if (format !== BarcodeFormat_1.default.QR_CODE) {\n            throw new IllegalArgumentException_1.default('Can only encode QR_CODE, but got ' + format);\n        }\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException_1.default(\"Requested dimensions are too small: \" + width + \"x\" + height);\n        }\n        var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n        var quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n        if (hints !== null) {\n            if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n                errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n            }\n            if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n                quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n            }\n        }\n        var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n        return QRCodeWriter.renderResult(code, width, height, quietZone);\n    };\n    // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n    // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n    QRCodeWriter.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n        var input = code.getMatrix();\n        if (input === null) {\n            throw new IllegalStateException_1.default();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var qrWidth = inputWidth + (quietZone * 2);\n        var qrHeight = inputHeight + (quietZone * 2);\n        var outputWidth = Math.max(width, qrWidth);\n        var outputHeight = Math.max(height, qrHeight);\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n        var output = new BitMatrix_1.default(outputWidth, outputHeight);\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY) === 1) {\n                    output.setRegion(outputX, outputY, multiple, multiple);\n                }\n            }\n        }\n        return output;\n    };\n    QRCodeWriter.QUIET_ZONE_SIZE = 4;\n    return QRCodeWriter;\n}());\nexports.default = QRCodeWriter;\n//# sourceMappingURL=QRCodeWriter.js.map"]},"metadata":{},"sourceType":"script"}