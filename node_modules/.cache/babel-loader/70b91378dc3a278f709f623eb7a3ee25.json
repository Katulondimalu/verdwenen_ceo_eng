{"ast":null,"code":"\"use strict\";\n\nconst externals = require(\"./externals\");\n\nconst Workbook = require(\"./Workbook\");\n\nconst FormulaError = require(\"./FormulaError\");\n\nconst dateConverter = require(\"./dateConverter\");\n\nconst RichText = require(\"./RichText\");\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\n\n\nclass XlsxPopulate {\n  /**\n   * Convert a date to a number for Excel.\n   * @param {Date} date - The date.\n   * @returns {number} The number.\n   */\n  static dateToNumber(date) {\n    return dateConverter.dateToNumber(date);\n  }\n  /**\n   * Create a new blank workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n\n\n  static fromBlankAsync() {\n    return Workbook.fromBlankAsync();\n  }\n  /**\n   * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n   * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n   * @param {{}} [opts] - Options\n   * @param {string} [opts.password] - The password to decrypt the workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n\n\n  static fromDataAsync(data, opts) {\n    return Workbook.fromDataAsync(data, opts);\n  }\n  /**\n   * Loads a workbook from file.\n   * @param {string} path - The path to the workbook.\n   * @param {{}} [opts] - Options\n   * @param {string} [opts.password] - The password to decrypt the workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n\n\n  static fromFileAsync(path, opts) {\n    return Workbook.fromFileAsync(path, opts);\n  }\n  /**\n   * Convert an Excel number to a date.\n   * @param {number} number - The number.\n   * @returns {Date} The date.\n   */\n\n\n  static numberToDate(number) {\n    return dateConverter.numberToDate(number);\n  }\n  /**\n   * The Promise library.\n   * @type {Promise}\n   */\n\n\n  static get Promise() {\n    return externals.Promise;\n  }\n\n  static set Promise(Promise) {\n    externals.Promise = Promise;\n  }\n\n}\n/**\n * The XLSX mime type.\n * @type {string}\n */\n\n\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n/**\n * Formula error class.\n * @type {FormulaError}\n */\n\nXlsxPopulate.FormulaError = FormulaError;\n/**\n * RichTexts class\n * @type {RichText}\n */\n\nXlsxPopulate.RichText = RichText;\nmodule.exports = XlsxPopulate;","map":{"version":3,"names":["externals","require","Workbook","FormulaError","dateConverter","RichText","XlsxPopulate","dateToNumber","date","fromBlankAsync","fromDataAsync","data","opts","fromFileAsync","path","numberToDate","number","Promise","MIME_TYPE","module","exports"],"sources":["/Users/stichtinghelden/Documents/GitHub/de_verdwenen_ceo/node_modules/xlsx-populate/lib/XlsxPopulate.js"],"sourcesContent":["\"use strict\";\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    static dateToNumber(date) {\n        return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromBlankAsync() {\n        return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromDataAsync(data, opts) {\n        return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromFileAsync(path, opts) {\n        return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    static numberToDate(number) {\n        return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    static get Promise() {\n        return externals.Promise;\n    }\n    static set Promise(Promise) {\n        externals.Promise = Promise;\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\n\nmodule.exports = XlsxPopulate;\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAxB;AAEA;AACA;AACA;AACA;;;AACA,MAAMK,YAAN,CAAmB;EACf;AACJ;AACA;AACA;AACA;EACuB,OAAZC,YAAY,CAACC,IAAD,EAAO;IACtB,OAAOJ,aAAa,CAACG,YAAd,CAA2BC,IAA3B,CAAP;EACH;EAED;AACJ;AACA;AACA;;;EACyB,OAAdC,cAAc,GAAG;IACpB,OAAOP,QAAQ,CAACO,cAAT,EAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACwB,OAAbC,aAAa,CAACC,IAAD,EAAOC,IAAP,EAAa;IAC7B,OAAOV,QAAQ,CAACQ,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACwB,OAAbC,aAAa,CAACC,IAAD,EAAOF,IAAP,EAAa;IAC7B,OAAOV,QAAQ,CAACW,aAAT,CAAuBC,IAAvB,EAA6BF,IAA7B,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACuB,OAAZG,YAAY,CAACC,MAAD,EAAS;IACxB,OAAOZ,aAAa,CAACW,YAAd,CAA2BC,MAA3B,CAAP;EACH;EAED;AACJ;AACA;AACA;;;EACsB,WAAPC,OAAO,GAAG;IACjB,OAAOjB,SAAS,CAACiB,OAAjB;EACH;;EACiB,WAAPA,OAAO,CAACA,OAAD,EAAU;IACxBjB,SAAS,CAACiB,OAAV,GAAoBA,OAApB;EACH;;AA1Dc;AA6DnB;AACA;AACA;AACA;;;AACAX,YAAY,CAACY,SAAb,GAAyBhB,QAAQ,CAACgB,SAAlC;AAEA;AACA;AACA;AACA;;AACAZ,YAAY,CAACH,YAAb,GAA4BA,YAA5B;AAEA;AACA;AACA;AACA;;AACAG,YAAY,CAACD,QAAb,GAAwBA,QAAxB;AAEAc,MAAM,CAACC,OAAP,GAAiBd,YAAjB"},"metadata":{},"sourceType":"script"}