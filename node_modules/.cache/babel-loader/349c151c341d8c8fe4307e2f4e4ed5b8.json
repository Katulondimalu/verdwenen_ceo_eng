{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\n\n\nclass ArgHandler {\n  /**\n   * Creates a new instance of ArgHandler.\n   * @param {string} name - The method name to use in error messages.\n   */\n  constructor(name) {\n    this._name = name;\n    this._cases = [];\n  }\n  /**\n   * Add a case.\n   * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n   * @param {Function} handler - The function to call when this case is matched.\n   * @returns {ArgHandler} The handler for chaining.\n   */\n\n\n  case(types, handler) {\n    if (arguments.length === 1) {\n      handler = types;\n      types = [];\n    }\n\n    if (!Array.isArray(types)) types = [types];\n\n    this._cases.push({\n      types,\n      handler\n    });\n\n    return this;\n  }\n  /**\n   * Handle the method arguments by checking each case in order until one matches and then call its handler.\n   * @param {Arguments|Array.<*>} args - The method arguments.\n   * @returns {*} The result of the handler.\n   * @throws {Error} Throws if no case matches.\n   */\n\n\n  handle(args) {\n    for (let i = 0; i < this._cases.length; i++) {\n      const c = this._cases[i];\n\n      if (this._argsMatchTypes(args, c.types)) {\n        return c.handler.apply(null, args);\n      }\n    }\n\n    throw new Error(`${this._name}: Invalid arguments.`);\n  }\n  /**\n   * Check if the arguments match the given types.\n   * @param {Arguments} args - The arguments.\n   * @param {Array.<string>} types - The types.\n   * @returns {boolean} True if matches, false otherwise.\n   * @throws {Error} Throws if unknown type.\n   * @private\n   */\n\n\n  _argsMatchTypes(args, types) {\n    if (args.length !== types.length) return false;\n    return _.every(args, (arg, i) => {\n      const type = types[i];\n      if (type === '*') return true;\n      if (type === 'nil') return _.isNil(arg);\n      if (type === 'string') return typeof arg === \"string\";\n      if (type === 'boolean') return typeof arg === \"boolean\";\n      if (type === 'number') return typeof arg === \"number\";\n      if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n      if (type === 'function') return typeof arg === \"function\";\n      if (type === 'array') return Array.isArray(arg);\n      if (type === 'date') return arg && arg.constructor === Date;\n      if (type === 'object') return arg && arg.constructor === Object;\n      if (arg && arg.constructor && arg.constructor.name === type) return true;\n      throw new Error(`Unknown type: ${type}`);\n    });\n  }\n\n}\n\nmodule.exports = ArgHandler;","map":{"version":3,"names":["_","require","ArgHandler","constructor","name","_name","_cases","case","types","handler","arguments","length","Array","isArray","push","handle","args","i","c","_argsMatchTypes","apply","Error","every","arg","type","isNil","isInteger","Date","Object","module","exports"],"sources":["/Users/stichtinghelden/Documents/GitHub/patient_0_eng/patient0eng/node_modules/xlsx-populate/lib/ArgHandler.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n    /**\n     * Creates a new instance of ArgHandler.\n     * @param {string} name - The method name to use in error messages.\n     */\n    constructor(name) {\n        this._name = name;\n        this._cases = [];\n    }\n\n    /**\n     * Add a case.\n     * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n     * @param {Function} handler - The function to call when this case is matched.\n     * @returns {ArgHandler} The handler for chaining.\n     */\n    case(types, handler) {\n        if (arguments.length === 1) {\n            handler = types;\n            types = [];\n        }\n\n        if (!Array.isArray(types)) types = [types];\n        this._cases.push({ types, handler });\n        return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n    handle(args) {\n        for (let i = 0; i < this._cases.length; i++) {\n            const c = this._cases[i];\n            if (this._argsMatchTypes(args, c.types)) {\n                return c.handler.apply(null, args);\n            }\n        }\n\n        throw new Error(`${this._name}: Invalid arguments.`);\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n    _argsMatchTypes(args, types) {\n        if (args.length !== types.length) return false;\n\n        return _.every(args, (arg, i) => {\n            const type = types[i];\n\n            if (type === '*') return true;\n            if (type === 'nil') return _.isNil(arg);\n            if (type === 'string') return typeof arg === \"string\";\n            if (type === 'boolean') return typeof arg === \"boolean\";\n            if (type === 'number') return typeof arg === \"number\";\n            if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n            if (type === 'function') return typeof arg === \"function\";\n            if (type === 'array') return Array.isArray(arg);\n            if (type === 'date') return arg && arg.constructor === Date;\n            if (type === 'object') return arg && arg.constructor === Object;\n            if (arg && arg.constructor && arg.constructor.name === type) return true;\n\n            throw new Error(`Unknown type: ${type}`);\n        });\n    }\n}\n\nmodule.exports = ArgHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}