{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\n\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\n\nvar BitMatrixParser_1 = require(\"./BitMatrixParser\");\n\nvar DataBlock_1 = require(\"./DataBlock\");\n\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\n\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting\n * the Data Matrix Code from an image.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\n\n\nvar Decoder =\n/** @class */\nfunction () {\n  function Decoder() {\n    this.rsDecoder = new ReedSolomonDecoder_1.default(GenericGF_1.default.DATA_MATRIX_FIELD_256);\n  }\n  /**\n   * <p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken\n   * to mean a black module.</p>\n   *\n   * @param bits booleans representing white/black Data Matrix Code modules\n   * @return text and bytes encoded within the Data Matrix Code\n   * @throws FormatException if the Data Matrix Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decode = function (bits) {\n    var e_1, _a; // Construct a parser and read version, error-correction level\n\n\n    var parser = new BitMatrixParser_1.default(bits);\n    var version = parser.getVersion(); // Read codewords\n\n    var codewords = parser.readCodewords(); // Separate into data blocks\n\n    var dataBlocks = DataBlock_1.default.getDataBlocks(codewords, version); // Count total number of data bytes\n\n    var totalBytes = 0;\n\n    try {\n      for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n        var db = dataBlocks_1_1.value;\n        totalBytes += db.getNumDataCodewords();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var resultBytes = new Uint8Array(totalBytes);\n    var dataBlocksCount = dataBlocks.length; // Error-correct and copy data blocks together into a stream of bytes\n\n    for (var j = 0; j < dataBlocksCount; j++) {\n      var dataBlock = dataBlocks[j];\n      var codewordBytes = dataBlock.getCodewords();\n      var numDataCodewords = dataBlock.getNumDataCodewords();\n      this.correctErrors(codewordBytes, numDataCodewords);\n\n      for (var i = 0; i < numDataCodewords; i++) {\n        // De-interlace data blocks.\n        resultBytes[i * dataBlocksCount + j] = codewordBytes[i];\n      }\n    } // Decode the contents of that stream of bytes\n\n\n    return DecodedBitStreamParser_1.default.decode(resultBytes);\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place using Reed-Solomon error correction.</p>\n   *\n   * @param codewordBytes data and error correction codewords\n   * @param numDataCodewords number of codewords that are data bytes\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords) {\n    var numCodewords = codewordBytes.length; // First read into an array of ints\n\n    var codewordsInts = new Int32Array(codewordBytes); // for (let i = 0; i < numCodewords; i++) {\n    //   codewordsInts[i] = codewordBytes[i] & 0xFF;\n    // }\n\n    try {\n      this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n    } catch (ignored\n    /* ReedSolomonException */\n    ) {\n      throw new ChecksumException_1.default();\n    } // Copy back into array of bytes -- only need to worry about the bytes that were data\n    // We don't care about errors in the error-correction codewords\n\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      codewordBytes[i] = codewordsInts[i];\n    }\n  };\n\n  return Decoder;\n}();\n\nexports.default = Decoder;","map":{"version":3,"sources":["../../../../src/core/datamatrix/decoder/Decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar BitMatrixParser_1 = require(\"./BitMatrixParser\");\nvar DataBlock_1 = require(\"./DataBlock\");\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting\n * the Data Matrix Code from an image.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\nvar Decoder = /** @class */ (function () {\n    function Decoder() {\n        this.rsDecoder = new ReedSolomonDecoder_1.default(GenericGF_1.default.DATA_MATRIX_FIELD_256);\n    }\n    /**\n     * <p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken\n     * to mean a black module.</p>\n     *\n     * @param bits booleans representing white/black Data Matrix Code modules\n     * @return text and bytes encoded within the Data Matrix Code\n     * @throws FormatException if the Data Matrix Code cannot be decoded\n     * @throws ChecksumException if error correction fails\n     */\n    Decoder.prototype.decode = function (bits) {\n        var e_1, _a;\n        // Construct a parser and read version, error-correction level\n        var parser = new BitMatrixParser_1.default(bits);\n        var version = parser.getVersion();\n        // Read codewords\n        var codewords = parser.readCodewords();\n        // Separate into data blocks\n        var dataBlocks = DataBlock_1.default.getDataBlocks(codewords, version);\n        // Count total number of data bytes\n        var totalBytes = 0;\n        try {\n            for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n                var db = dataBlocks_1_1.value;\n                totalBytes += db.getNumDataCodewords();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var resultBytes = new Uint8Array(totalBytes);\n        var dataBlocksCount = dataBlocks.length;\n        // Error-correct and copy data blocks together into a stream of bytes\n        for (var j = 0; j < dataBlocksCount; j++) {\n            var dataBlock = dataBlocks[j];\n            var codewordBytes = dataBlock.getCodewords();\n            var numDataCodewords = dataBlock.getNumDataCodewords();\n            this.correctErrors(codewordBytes, numDataCodewords);\n            for (var i = 0; i < numDataCodewords; i++) {\n                // De-interlace data blocks.\n                resultBytes[i * dataBlocksCount + j] = codewordBytes[i];\n            }\n        }\n        // Decode the contents of that stream of bytes\n        return DecodedBitStreamParser_1.default.decode(resultBytes);\n    };\n    /**\n     * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n     * correct the errors in-place using Reed-Solomon error correction.</p>\n     *\n     * @param codewordBytes data and error correction codewords\n     * @param numDataCodewords number of codewords that are data bytes\n     * @throws ChecksumException if error correction fails\n     */\n    Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords) {\n        var numCodewords = codewordBytes.length;\n        // First read into an array of ints\n        var codewordsInts = new Int32Array(codewordBytes);\n        // for (let i = 0; i < numCodewords; i++) {\n        //   codewordsInts[i] = codewordBytes[i] & 0xFF;\n        // }\n        try {\n            this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n        }\n        catch (ignored /* ReedSolomonException */) {\n            throw new ChecksumException_1.default();\n        }\n        // Copy back into array of bytes -- only need to worry about the bytes that were data\n        // We don't care about errors in the error-correction codewords\n        for (var i = 0; i < numDataCodewords; i++) {\n            codewordBytes[i] = codewordsInts[i];\n        }\n    };\n    return Decoder;\n}());\nexports.default = Decoder;\n//# sourceMappingURL=Decoder.js.map"]},"metadata":{},"sourceType":"script"}