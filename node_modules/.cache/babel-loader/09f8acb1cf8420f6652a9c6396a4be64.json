{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n\nvar DetectorResult_1 = require(\"../../common/DetectorResult\");\n\nvar GridSamplerInstance_1 = require(\"../../common/GridSamplerInstance\");\n\nvar WhiteRectangleDetector_1 = require(\"../../common/detector/WhiteRectangleDetector\");\n\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>Encapsulates logic that can detect a Data Matrix Code in an image, even if the Data Matrix Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\n\n\nvar Detector =\n/** @class */\nfunction () {\n  function Detector(image) {\n    this.image = image;\n    this.rectangleDetector = new WhiteRectangleDetector_1.default(this.image);\n  }\n  /**\n   * <p>Detects a Data Matrix Code in an image.</p>\n   *\n   * @return {@link DetectorResult} encapsulating results of detecting a Data Matrix Code\n   * @throws NotFoundException if no Data Matrix Code can be found\n   */\n\n\n  Detector.prototype.detect = function () {\n    var cornerPoints = this.rectangleDetector.detect();\n    var points = this.detectSolid1(cornerPoints);\n    points = this.detectSolid2(points);\n    points[3] = this.correctTopRight(points);\n\n    if (!points[3]) {\n      throw new NotFoundException_1.default();\n    }\n\n    points = this.shiftToModuleCenter(points);\n    var topLeft = points[0];\n    var bottomLeft = points[1];\n    var bottomRight = points[2];\n    var topRight = points[3];\n    var dimensionTop = this.transitionsBetween(topLeft, topRight) + 1;\n    var dimensionRight = this.transitionsBetween(bottomRight, topRight) + 1;\n\n    if ((dimensionTop & 0x01) === 1) {\n      dimensionTop += 1;\n    }\n\n    if ((dimensionRight & 0x01) === 1) {\n      dimensionRight += 1;\n    }\n\n    if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {\n      // The matrix is square\n      dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);\n    }\n\n    var bits = Detector.sampleGrid(this.image, topLeft, bottomLeft, bottomRight, topRight, dimensionTop, dimensionRight);\n    return new DetectorResult_1.default(bits, [topLeft, bottomLeft, bottomRight, topRight]);\n  };\n\n  Detector.shiftPoint = function (point, to, div) {\n    var x = (to.getX() - point.getX()) / (div + 1);\n    var y = (to.getY() - point.getY()) / (div + 1);\n    return new ResultPoint_1.default(point.getX() + x, point.getY() + y);\n  };\n\n  Detector.moveAway = function (point, fromX, fromY) {\n    var x = point.getX();\n    var y = point.getY();\n\n    if (x < fromX) {\n      x -= 1;\n    } else {\n      x += 1;\n    }\n\n    if (y < fromY) {\n      y -= 1;\n    } else {\n      y += 1;\n    }\n\n    return new ResultPoint_1.default(x, y);\n  };\n  /**\n   * Detect a solid side which has minimum transition.\n   */\n\n\n  Detector.prototype.detectSolid1 = function (cornerPoints) {\n    // 0  2\n    // 1  3\n    var pointA = cornerPoints[0];\n    var pointB = cornerPoints[1];\n    var pointC = cornerPoints[3];\n    var pointD = cornerPoints[2];\n    var trAB = this.transitionsBetween(pointA, pointB);\n    var trBC = this.transitionsBetween(pointB, pointC);\n    var trCD = this.transitionsBetween(pointC, pointD);\n    var trDA = this.transitionsBetween(pointD, pointA); // 0..3\n    // :  :\n    // 1--2\n\n    var min = trAB;\n    var points = [pointD, pointA, pointB, pointC];\n\n    if (min > trBC) {\n      min = trBC;\n      points[0] = pointA;\n      points[1] = pointB;\n      points[2] = pointC;\n      points[3] = pointD;\n    }\n\n    if (min > trCD) {\n      min = trCD;\n      points[0] = pointB;\n      points[1] = pointC;\n      points[2] = pointD;\n      points[3] = pointA;\n    }\n\n    if (min > trDA) {\n      points[0] = pointC;\n      points[1] = pointD;\n      points[2] = pointA;\n      points[3] = pointB;\n    }\n\n    return points;\n  };\n  /**\n   * Detect a second solid side next to first solid side.\n   */\n\n\n  Detector.prototype.detectSolid2 = function (points) {\n    // A..D\n    // :  :\n    // B--C\n    var pointA = points[0];\n    var pointB = points[1];\n    var pointC = points[2];\n    var pointD = points[3]; // Transition detection on the edge is not stable.\n    // To safely detect, shift the points to the module center.\n\n    var tr = this.transitionsBetween(pointA, pointD);\n    var pointBs = Detector.shiftPoint(pointB, pointC, (tr + 1) * 4);\n    var pointCs = Detector.shiftPoint(pointC, pointB, (tr + 1) * 4);\n    var trBA = this.transitionsBetween(pointBs, pointA);\n    var trCD = this.transitionsBetween(pointCs, pointD); // 0..3\n    // |  :\n    // 1--2\n\n    if (trBA < trCD) {\n      // solid sides: A-B-C\n      points[0] = pointA;\n      points[1] = pointB;\n      points[2] = pointC;\n      points[3] = pointD;\n    } else {\n      // solid sides: B-C-D\n      points[0] = pointB;\n      points[1] = pointC;\n      points[2] = pointD;\n      points[3] = pointA;\n    }\n\n    return points;\n  };\n  /**\n   * Calculates the corner position of the white top right module.\n   */\n\n\n  Detector.prototype.correctTopRight = function (points) {\n    // A..D\n    // |  :\n    // B--C\n    var pointA = points[0];\n    var pointB = points[1];\n    var pointC = points[2];\n    var pointD = points[3]; // shift points for safe transition detection.\n\n    var trTop = this.transitionsBetween(pointA, pointD);\n    var trRight = this.transitionsBetween(pointB, pointD);\n    var pointAs = Detector.shiftPoint(pointA, pointB, (trRight + 1) * 4);\n    var pointCs = Detector.shiftPoint(pointC, pointB, (trTop + 1) * 4);\n    trTop = this.transitionsBetween(pointAs, pointD);\n    trRight = this.transitionsBetween(pointCs, pointD);\n    var candidate1 = new ResultPoint_1.default(pointD.getX() + (pointC.getX() - pointB.getX()) / (trTop + 1), pointD.getY() + (pointC.getY() - pointB.getY()) / (trTop + 1));\n    var candidate2 = new ResultPoint_1.default(pointD.getX() + (pointA.getX() - pointB.getX()) / (trRight + 1), pointD.getY() + (pointA.getY() - pointB.getY()) / (trRight + 1));\n\n    if (!this.isValid(candidate1)) {\n      if (this.isValid(candidate2)) {\n        return candidate2;\n      }\n\n      return null;\n    }\n\n    if (!this.isValid(candidate2)) {\n      return candidate1;\n    }\n\n    var sumc1 = this.transitionsBetween(pointAs, candidate1) + this.transitionsBetween(pointCs, candidate1);\n    var sumc2 = this.transitionsBetween(pointAs, candidate2) + this.transitionsBetween(pointCs, candidate2);\n\n    if (sumc1 > sumc2) {\n      return candidate1;\n    } else {\n      return candidate2;\n    }\n  };\n  /**\n   * Shift the edge points to the module center.\n   */\n\n\n  Detector.prototype.shiftToModuleCenter = function (points) {\n    // A..D\n    // |  :\n    // B--C\n    var pointA = points[0];\n    var pointB = points[1];\n    var pointC = points[2];\n    var pointD = points[3]; // calculate pseudo dimensions\n\n    var dimH = this.transitionsBetween(pointA, pointD) + 1;\n    var dimV = this.transitionsBetween(pointC, pointD) + 1; // shift points for safe dimension detection\n\n    var pointAs = Detector.shiftPoint(pointA, pointB, dimV * 4);\n    var pointCs = Detector.shiftPoint(pointC, pointB, dimH * 4); //  calculate more precise dimensions\n\n    dimH = this.transitionsBetween(pointAs, pointD) + 1;\n    dimV = this.transitionsBetween(pointCs, pointD) + 1;\n\n    if ((dimH & 0x01) === 1) {\n      dimH += 1;\n    }\n\n    if ((dimV & 0x01) === 1) {\n      dimV += 1;\n    } // WhiteRectangleDetector returns points inside of the rectangle.\n    // I want points on the edges.\n\n\n    var centerX = (pointA.getX() + pointB.getX() + pointC.getX() + pointD.getX()) / 4;\n    var centerY = (pointA.getY() + pointB.getY() + pointC.getY() + pointD.getY()) / 4;\n    pointA = Detector.moveAway(pointA, centerX, centerY);\n    pointB = Detector.moveAway(pointB, centerX, centerY);\n    pointC = Detector.moveAway(pointC, centerX, centerY);\n    pointD = Detector.moveAway(pointD, centerX, centerY);\n    var pointBs;\n    var pointDs; // shift points to the center of each modules\n\n    pointAs = Detector.shiftPoint(pointA, pointB, dimV * 4);\n    pointAs = Detector.shiftPoint(pointAs, pointD, dimH * 4);\n    pointBs = Detector.shiftPoint(pointB, pointA, dimV * 4);\n    pointBs = Detector.shiftPoint(pointBs, pointC, dimH * 4);\n    pointCs = Detector.shiftPoint(pointC, pointD, dimV * 4);\n    pointCs = Detector.shiftPoint(pointCs, pointB, dimH * 4);\n    pointDs = Detector.shiftPoint(pointD, pointC, dimV * 4);\n    pointDs = Detector.shiftPoint(pointDs, pointA, dimH * 4);\n    return [pointAs, pointBs, pointCs, pointDs];\n  };\n\n  Detector.prototype.isValid = function (p) {\n    return p.getX() >= 0 && p.getX() < this.image.getWidth() && p.getY() > 0 && p.getY() < this.image.getHeight();\n  };\n\n  Detector.sampleGrid = function (image, topLeft, bottomLeft, bottomRight, topRight, dimensionX, dimensionY) {\n    var sampler = GridSamplerInstance_1.default.getInstance();\n    return sampler.sampleGrid(image, dimensionX, dimensionY, 0.5, 0.5, dimensionX - 0.5, 0.5, dimensionX - 0.5, dimensionY - 0.5, 0.5, dimensionY - 0.5, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRight.getX(), bottomRight.getY(), bottomLeft.getX(), bottomLeft.getY());\n  };\n  /**\n   * Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.\n   */\n\n\n  Detector.prototype.transitionsBetween = function (from, to) {\n    // See QR Code Detector, sizeOfBlackWhiteBlackRun()\n    var fromX = Math.trunc(from.getX());\n    var fromY = Math.trunc(from.getY());\n    var toX = Math.trunc(to.getX());\n    var toY = Math.trunc(to.getY());\n    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n\n    if (steep) {\n      var temp = fromX;\n      fromX = fromY;\n      fromY = temp;\n      temp = toX;\n      toX = toY;\n      toY = temp;\n    }\n\n    var dx = Math.abs(toX - fromX);\n    var dy = Math.abs(toY - fromY);\n    var error = -dx / 2;\n    var ystep = fromY < toY ? 1 : -1;\n    var xstep = fromX < toX ? 1 : -1;\n    var transitions = 0;\n    var inBlack = this.image.get(steep ? fromY : fromX, steep ? fromX : fromY);\n\n    for (var x = fromX, y = fromY; x !== toX; x += xstep) {\n      var isBlack = this.image.get(steep ? y : x, steep ? x : y);\n\n      if (isBlack !== inBlack) {\n        transitions++;\n        inBlack = isBlack;\n      }\n\n      error += dy;\n\n      if (error > 0) {\n        if (y === toY) {\n          break;\n        }\n\n        y += ystep;\n        error -= dx;\n      }\n    }\n\n    return transitions;\n  };\n\n  return Detector;\n}();\n\nexports.default = Detector;","map":{"version":3,"sources":["../../../../src/core/datamatrix/detector/Detector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResultPoint_1 = require(\"../../ResultPoint\");\nvar DetectorResult_1 = require(\"../../common/DetectorResult\");\nvar GridSamplerInstance_1 = require(\"../../common/GridSamplerInstance\");\nvar WhiteRectangleDetector_1 = require(\"../../common/detector/WhiteRectangleDetector\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * <p>Encapsulates logic that can detect a Data Matrix Code in an image, even if the Data Matrix Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\nvar Detector = /** @class */ (function () {\n    function Detector(image) {\n        this.image = image;\n        this.rectangleDetector = new WhiteRectangleDetector_1.default(this.image);\n    }\n    /**\n     * <p>Detects a Data Matrix Code in an image.</p>\n     *\n     * @return {@link DetectorResult} encapsulating results of detecting a Data Matrix Code\n     * @throws NotFoundException if no Data Matrix Code can be found\n     */\n    Detector.prototype.detect = function () {\n        var cornerPoints = this.rectangleDetector.detect();\n        var points = this.detectSolid1(cornerPoints);\n        points = this.detectSolid2(points);\n        points[3] = this.correctTopRight(points);\n        if (!points[3]) {\n            throw new NotFoundException_1.default();\n        }\n        points = this.shiftToModuleCenter(points);\n        var topLeft = points[0];\n        var bottomLeft = points[1];\n        var bottomRight = points[2];\n        var topRight = points[3];\n        var dimensionTop = this.transitionsBetween(topLeft, topRight) + 1;\n        var dimensionRight = this.transitionsBetween(bottomRight, topRight) + 1;\n        if ((dimensionTop & 0x01) === 1) {\n            dimensionTop += 1;\n        }\n        if ((dimensionRight & 0x01) === 1) {\n            dimensionRight += 1;\n        }\n        if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {\n            // The matrix is square\n            dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);\n        }\n        var bits = Detector.sampleGrid(this.image, topLeft, bottomLeft, bottomRight, topRight, dimensionTop, dimensionRight);\n        return new DetectorResult_1.default(bits, [topLeft, bottomLeft, bottomRight, topRight]);\n    };\n    Detector.shiftPoint = function (point, to, div) {\n        var x = (to.getX() - point.getX()) / (div + 1);\n        var y = (to.getY() - point.getY()) / (div + 1);\n        return new ResultPoint_1.default(point.getX() + x, point.getY() + y);\n    };\n    Detector.moveAway = function (point, fromX, fromY) {\n        var x = point.getX();\n        var y = point.getY();\n        if (x < fromX) {\n            x -= 1;\n        }\n        else {\n            x += 1;\n        }\n        if (y < fromY) {\n            y -= 1;\n        }\n        else {\n            y += 1;\n        }\n        return new ResultPoint_1.default(x, y);\n    };\n    /**\n     * Detect a solid side which has minimum transition.\n     */\n    Detector.prototype.detectSolid1 = function (cornerPoints) {\n        // 0  2\n        // 1  3\n        var pointA = cornerPoints[0];\n        var pointB = cornerPoints[1];\n        var pointC = cornerPoints[3];\n        var pointD = cornerPoints[2];\n        var trAB = this.transitionsBetween(pointA, pointB);\n        var trBC = this.transitionsBetween(pointB, pointC);\n        var trCD = this.transitionsBetween(pointC, pointD);\n        var trDA = this.transitionsBetween(pointD, pointA);\n        // 0..3\n        // :  :\n        // 1--2\n        var min = trAB;\n        var points = [pointD, pointA, pointB, pointC];\n        if (min > trBC) {\n            min = trBC;\n            points[0] = pointA;\n            points[1] = pointB;\n            points[2] = pointC;\n            points[3] = pointD;\n        }\n        if (min > trCD) {\n            min = trCD;\n            points[0] = pointB;\n            points[1] = pointC;\n            points[2] = pointD;\n            points[3] = pointA;\n        }\n        if (min > trDA) {\n            points[0] = pointC;\n            points[1] = pointD;\n            points[2] = pointA;\n            points[3] = pointB;\n        }\n        return points;\n    };\n    /**\n     * Detect a second solid side next to first solid side.\n     */\n    Detector.prototype.detectSolid2 = function (points) {\n        // A..D\n        // :  :\n        // B--C\n        var pointA = points[0];\n        var pointB = points[1];\n        var pointC = points[2];\n        var pointD = points[3];\n        // Transition detection on the edge is not stable.\n        // To safely detect, shift the points to the module center.\n        var tr = this.transitionsBetween(pointA, pointD);\n        var pointBs = Detector.shiftPoint(pointB, pointC, (tr + 1) * 4);\n        var pointCs = Detector.shiftPoint(pointC, pointB, (tr + 1) * 4);\n        var trBA = this.transitionsBetween(pointBs, pointA);\n        var trCD = this.transitionsBetween(pointCs, pointD);\n        // 0..3\n        // |  :\n        // 1--2\n        if (trBA < trCD) {\n            // solid sides: A-B-C\n            points[0] = pointA;\n            points[1] = pointB;\n            points[2] = pointC;\n            points[3] = pointD;\n        }\n        else {\n            // solid sides: B-C-D\n            points[0] = pointB;\n            points[1] = pointC;\n            points[2] = pointD;\n            points[3] = pointA;\n        }\n        return points;\n    };\n    /**\n     * Calculates the corner position of the white top right module.\n     */\n    Detector.prototype.correctTopRight = function (points) {\n        // A..D\n        // |  :\n        // B--C\n        var pointA = points[0];\n        var pointB = points[1];\n        var pointC = points[2];\n        var pointD = points[3];\n        // shift points for safe transition detection.\n        var trTop = this.transitionsBetween(pointA, pointD);\n        var trRight = this.transitionsBetween(pointB, pointD);\n        var pointAs = Detector.shiftPoint(pointA, pointB, (trRight + 1) * 4);\n        var pointCs = Detector.shiftPoint(pointC, pointB, (trTop + 1) * 4);\n        trTop = this.transitionsBetween(pointAs, pointD);\n        trRight = this.transitionsBetween(pointCs, pointD);\n        var candidate1 = new ResultPoint_1.default(pointD.getX() + (pointC.getX() - pointB.getX()) / (trTop + 1), pointD.getY() + (pointC.getY() - pointB.getY()) / (trTop + 1));\n        var candidate2 = new ResultPoint_1.default(pointD.getX() + (pointA.getX() - pointB.getX()) / (trRight + 1), pointD.getY() + (pointA.getY() - pointB.getY()) / (trRight + 1));\n        if (!this.isValid(candidate1)) {\n            if (this.isValid(candidate2)) {\n                return candidate2;\n            }\n            return null;\n        }\n        if (!this.isValid(candidate2)) {\n            return candidate1;\n        }\n        var sumc1 = this.transitionsBetween(pointAs, candidate1) + this.transitionsBetween(pointCs, candidate1);\n        var sumc2 = this.transitionsBetween(pointAs, candidate2) + this.transitionsBetween(pointCs, candidate2);\n        if (sumc1 > sumc2) {\n            return candidate1;\n        }\n        else {\n            return candidate2;\n        }\n    };\n    /**\n     * Shift the edge points to the module center.\n     */\n    Detector.prototype.shiftToModuleCenter = function (points) {\n        // A..D\n        // |  :\n        // B--C\n        var pointA = points[0];\n        var pointB = points[1];\n        var pointC = points[2];\n        var pointD = points[3];\n        // calculate pseudo dimensions\n        var dimH = this.transitionsBetween(pointA, pointD) + 1;\n        var dimV = this.transitionsBetween(pointC, pointD) + 1;\n        // shift points for safe dimension detection\n        var pointAs = Detector.shiftPoint(pointA, pointB, dimV * 4);\n        var pointCs = Detector.shiftPoint(pointC, pointB, dimH * 4);\n        //  calculate more precise dimensions\n        dimH = this.transitionsBetween(pointAs, pointD) + 1;\n        dimV = this.transitionsBetween(pointCs, pointD) + 1;\n        if ((dimH & 0x01) === 1) {\n            dimH += 1;\n        }\n        if ((dimV & 0x01) === 1) {\n            dimV += 1;\n        }\n        // WhiteRectangleDetector returns points inside of the rectangle.\n        // I want points on the edges.\n        var centerX = (pointA.getX() + pointB.getX() + pointC.getX() + pointD.getX()) / 4;\n        var centerY = (pointA.getY() + pointB.getY() + pointC.getY() + pointD.getY()) / 4;\n        pointA = Detector.moveAway(pointA, centerX, centerY);\n        pointB = Detector.moveAway(pointB, centerX, centerY);\n        pointC = Detector.moveAway(pointC, centerX, centerY);\n        pointD = Detector.moveAway(pointD, centerX, centerY);\n        var pointBs;\n        var pointDs;\n        // shift points to the center of each modules\n        pointAs = Detector.shiftPoint(pointA, pointB, dimV * 4);\n        pointAs = Detector.shiftPoint(pointAs, pointD, dimH * 4);\n        pointBs = Detector.shiftPoint(pointB, pointA, dimV * 4);\n        pointBs = Detector.shiftPoint(pointBs, pointC, dimH * 4);\n        pointCs = Detector.shiftPoint(pointC, pointD, dimV * 4);\n        pointCs = Detector.shiftPoint(pointCs, pointB, dimH * 4);\n        pointDs = Detector.shiftPoint(pointD, pointC, dimV * 4);\n        pointDs = Detector.shiftPoint(pointDs, pointA, dimH * 4);\n        return [pointAs, pointBs, pointCs, pointDs];\n    };\n    Detector.prototype.isValid = function (p) {\n        return p.getX() >= 0 && p.getX() < this.image.getWidth() && p.getY() > 0 && p.getY() < this.image.getHeight();\n    };\n    Detector.sampleGrid = function (image, topLeft, bottomLeft, bottomRight, topRight, dimensionX, dimensionY) {\n        var sampler = GridSamplerInstance_1.default.getInstance();\n        return sampler.sampleGrid(image, dimensionX, dimensionY, 0.5, 0.5, dimensionX - 0.5, 0.5, dimensionX - 0.5, dimensionY - 0.5, 0.5, dimensionY - 0.5, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRight.getX(), bottomRight.getY(), bottomLeft.getX(), bottomLeft.getY());\n    };\n    /**\n     * Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.\n     */\n    Detector.prototype.transitionsBetween = function (from, to) {\n        // See QR Code Detector, sizeOfBlackWhiteBlackRun()\n        var fromX = Math.trunc(from.getX());\n        var fromY = Math.trunc(from.getY());\n        var toX = Math.trunc(to.getX());\n        var toY = Math.trunc(to.getY());\n        var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n        if (steep) {\n            var temp = fromX;\n            fromX = fromY;\n            fromY = temp;\n            temp = toX;\n            toX = toY;\n            toY = temp;\n        }\n        var dx = Math.abs(toX - fromX);\n        var dy = Math.abs(toY - fromY);\n        var error = -dx / 2;\n        var ystep = fromY < toY ? 1 : -1;\n        var xstep = fromX < toX ? 1 : -1;\n        var transitions = 0;\n        var inBlack = this.image.get(steep ? fromY : fromX, steep ? fromX : fromY);\n        for (var x = fromX, y = fromY; x !== toX; x += xstep) {\n            var isBlack = this.image.get(steep ? y : x, steep ? x : y);\n            if (isBlack !== inBlack) {\n                transitions++;\n                inBlack = isBlack;\n            }\n            error += dy;\n            if (error > 0) {\n                if (y === toY) {\n                    break;\n                }\n                y += ystep;\n                error -= dx;\n            }\n        }\n        return transitions;\n    };\n    return Detector;\n}());\nexports.default = Detector;\n//# sourceMappingURL=Detector.js.map"]},"metadata":{},"sourceType":"script"}