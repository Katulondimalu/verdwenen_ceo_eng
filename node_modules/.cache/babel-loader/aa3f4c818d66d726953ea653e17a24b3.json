{"ast":null,"code":"\"use strict\";\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\n/*import java.nio.charset.Charset;*/\n\n/*import java.util.Map;*/\n\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\n\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\n\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\n\n\nvar StringUtils =\n/** @class */\nfunction () {\n  function StringUtils() {} // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n\n\n  StringUtils.castAsNonUtf8Char = function (code, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    } // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n    // you can see this method as a Java version of String.fromCharCode\n\n\n    var e = encoding ? encoding.getName() : this.ISO88591; // use passed format (fromCharCode will return UTF8 encoding)\n\n    return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n  };\n  /**\n   * @param bytes bytes encoding a string, whose encoding should be guessed\n   * @param hints decode hints if applicable\n   * @return name of guessed encoding; at the moment will only guess one of:\n   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n   *  default encoding if none of these can possibly be correct\n   */\n\n\n  StringUtils.guessEncoding = function (bytes, hints) {\n    if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n      return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n    } // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n    // which should be by far the most common encodings.\n\n\n    var length = bytes.length;\n    var canBeISO88591 = true;\n    var canBeShiftJIS = true;\n    var canBeUTF8 = true;\n    var utf8BytesLeft = 0; // int utf8LowChars = 0\n\n    var utf2BytesChars = 0;\n    var utf3BytesChars = 0;\n    var utf4BytesChars = 0;\n    var sjisBytesLeft = 0; // int sjisLowChars = 0\n\n    var sjisKatakanaChars = 0; // int sjisDoubleBytesChars = 0\n\n    var sjisCurKatakanaWordLength = 0;\n    var sjisCurDoubleBytesWordLength = 0;\n    var sjisMaxKatakanaWordLength = 0;\n    var sjisMaxDoubleBytesWordLength = 0; // int isoLowChars = 0\n    // int isoHighChars = 0\n\n    var isoHighOther = 0;\n    var utf8bom = bytes.length > 3 && bytes[0] ===\n    /*(byte) */\n    0xEF && bytes[1] ===\n    /*(byte) */\n    0xBB && bytes[2] ===\n    /*(byte) */\n    0xBF;\n\n    for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n      var value = bytes[i] & 0xFF; // UTF-8 stuff\n\n      if (canBeUTF8) {\n        if (utf8BytesLeft > 0) {\n          if ((value & 0x80) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft--;\n          }\n        } else if ((value & 0x80) !== 0) {\n          if ((value & 0x40) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft++;\n\n            if ((value & 0x20) === 0) {\n              utf2BytesChars++;\n            } else {\n              utf8BytesLeft++;\n\n              if ((value & 0x10) === 0) {\n                utf3BytesChars++;\n              } else {\n                utf8BytesLeft++;\n\n                if ((value & 0x08) === 0) {\n                  utf4BytesChars++;\n                } else {\n                  canBeUTF8 = false;\n                }\n              }\n            }\n          }\n        } // else {\n        // utf8LowChars++\n        // }\n\n      } // ISO-8859-1 stuff\n\n\n      if (canBeISO88591) {\n        if (value > 0x7F && value < 0xA0) {\n          canBeISO88591 = false;\n        } else if (value > 0x9F) {\n          if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n            isoHighOther++;\n          } // else {\n          // isoHighChars++\n          // }\n\n        } // else {\n        // isoLowChars++\n        // }\n\n      } // Shift_JIS stuff\n\n\n      if (canBeShiftJIS) {\n        if (sjisBytesLeft > 0) {\n          if (value < 0x40 || value === 0x7F || value > 0xFC) {\n            canBeShiftJIS = false;\n          } else {\n            sjisBytesLeft--;\n          }\n        } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n          canBeShiftJIS = false;\n        } else if (value > 0xA0 && value < 0xE0) {\n          sjisKatakanaChars++;\n          sjisCurDoubleBytesWordLength = 0;\n          sjisCurKatakanaWordLength++;\n\n          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n          }\n        } else if (value > 0x7F) {\n          sjisBytesLeft++; // sjisDoubleBytesChars++\n\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength++;\n\n          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n          }\n        } else {\n          // sjisLowChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength = 0;\n        }\n      }\n    }\n\n    if (canBeUTF8 && utf8BytesLeft > 0) {\n      canBeUTF8 = false;\n    }\n\n    if (canBeShiftJIS && sjisBytesLeft > 0) {\n      canBeShiftJIS = false;\n    } // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n\n\n    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n      return StringUtils.UTF8;\n    } // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n\n\n    if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n      return StringUtils.SHIFT_JIS;\n    } // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n    // - If we saw\n    //   - only two consecutive katakana chars in the whole text, or\n    //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n    // - then we conclude Shift_JIS, else ISO-8859-1\n\n\n    if (canBeISO88591 && canBeShiftJIS) {\n      return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n    } // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n\n\n    if (canBeISO88591) {\n      return StringUtils.ISO88591;\n    }\n\n    if (canBeShiftJIS) {\n      return StringUtils.SHIFT_JIS;\n    }\n\n    if (canBeUTF8) {\n      return StringUtils.UTF8;\n    } // Otherwise, we take a wild guess with platform encoding\n\n\n    return StringUtils.PLATFORM_DEFAULT_ENCODING;\n  };\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n\n\n  StringUtils.format = function (append) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var i = -1;\n\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (args[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n\n      switch (p4) {\n        case 's':\n          val = args[i];\n          break;\n\n        case 'c':\n          val = args[i][0];\n          break;\n\n        case 'f':\n          val = parseFloat(args[i]).toFixed(exp);\n          break;\n\n        case 'p':\n          val = parseFloat(args[i]).toPrecision(exp);\n          break;\n\n        case 'e':\n          val = parseFloat(args[i]).toExponential(exp);\n          break;\n\n        case 'x':\n          val = parseInt(args[i]).toString(base ? base : 16);\n          break;\n\n        case 'd':\n          val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1);\n      /* padding size */\n\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' ';\n      /* isnull? */\n\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val;\n      /* isminus? */\n\n\n      return val;\n    }\n\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return append.replace(regex, callback);\n  };\n  /**\n   *\n   */\n\n\n  StringUtils.getBytes = function (str, encoding) {\n    return StringEncoding_1.default.encode(str, encoding);\n  };\n  /**\n   * Returns the charcode at the specified index or at index zero.\n   */\n\n\n  StringUtils.getCharCode = function (str, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return str.charCodeAt(index);\n  };\n  /**\n   * Returns char for given charcode\n   */\n\n\n  StringUtils.getCharAt = function (charCode) {\n    return String.fromCharCode(charCode);\n  };\n\n  StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n\n  StringUtils.GB2312 = 'GB2312';\n  StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n\n  StringUtils.EUC_JP = 'EUC_JP';\n  StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n\n  StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n\n  StringUtils.ASSUME_SHIFT_JIS = false;\n  return StringUtils;\n}();\n\nexports.default = StringUtils;","map":{"version":3,"sources":["../../../src/core/common/StringUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\nvar StringUtils = /** @class */ (function () {\n    function StringUtils() {\n    }\n    // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n    // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n    StringUtils.castAsNonUtf8Char = function (code, encoding) {\n        if (encoding === void 0) { encoding = null; }\n        // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n        // you can see this method as a Java version of String.fromCharCode\n        var e = encoding ? encoding.getName() : this.ISO88591;\n        // use passed format (fromCharCode will return UTF8 encoding)\n        return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n    };\n    /**\n     * @param bytes bytes encoding a string, whose encoding should be guessed\n     * @param hints decode hints if applicable\n     * @return name of guessed encoding; at the moment will only guess one of:\n     *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n     *  default encoding if none of these can possibly be correct\n     */\n    StringUtils.guessEncoding = function (bytes, hints) {\n        if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n            return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n        }\n        // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n        // which should be by far the most common encodings.\n        var length = bytes.length;\n        var canBeISO88591 = true;\n        var canBeShiftJIS = true;\n        var canBeUTF8 = true;\n        var utf8BytesLeft = 0;\n        // int utf8LowChars = 0\n        var utf2BytesChars = 0;\n        var utf3BytesChars = 0;\n        var utf4BytesChars = 0;\n        var sjisBytesLeft = 0;\n        // int sjisLowChars = 0\n        var sjisKatakanaChars = 0;\n        // int sjisDoubleBytesChars = 0\n        var sjisCurKatakanaWordLength = 0;\n        var sjisCurDoubleBytesWordLength = 0;\n        var sjisMaxKatakanaWordLength = 0;\n        var sjisMaxDoubleBytesWordLength = 0;\n        // int isoLowChars = 0\n        // int isoHighChars = 0\n        var isoHighOther = 0;\n        var utf8bom = bytes.length > 3 &&\n            bytes[0] === /*(byte) */ 0xEF &&\n            bytes[1] === /*(byte) */ 0xBB &&\n            bytes[2] === /*(byte) */ 0xBF;\n        for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n            var value = bytes[i] & 0xFF;\n            // UTF-8 stuff\n            if (canBeUTF8) {\n                if (utf8BytesLeft > 0) {\n                    if ((value & 0x80) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft--;\n                    }\n                }\n                else if ((value & 0x80) !== 0) {\n                    if ((value & 0x40) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft++;\n                        if ((value & 0x20) === 0) {\n                            utf2BytesChars++;\n                        }\n                        else {\n                            utf8BytesLeft++;\n                            if ((value & 0x10) === 0) {\n                                utf3BytesChars++;\n                            }\n                            else {\n                                utf8BytesLeft++;\n                                if ((value & 0x08) === 0) {\n                                    utf4BytesChars++;\n                                }\n                                else {\n                                    canBeUTF8 = false;\n                                }\n                            }\n                        }\n                    }\n                } // else {\n                // utf8LowChars++\n                // }\n            }\n            // ISO-8859-1 stuff\n            if (canBeISO88591) {\n                if (value > 0x7F && value < 0xA0) {\n                    canBeISO88591 = false;\n                }\n                else if (value > 0x9F) {\n                    if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n                        isoHighOther++;\n                    } // else {\n                    // isoHighChars++\n                    // }\n                } // else {\n                // isoLowChars++\n                // }\n            }\n            // Shift_JIS stuff\n            if (canBeShiftJIS) {\n                if (sjisBytesLeft > 0) {\n                    if (value < 0x40 || value === 0x7F || value > 0xFC) {\n                        canBeShiftJIS = false;\n                    }\n                    else {\n                        sjisBytesLeft--;\n                    }\n                }\n                else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n                    canBeShiftJIS = false;\n                }\n                else if (value > 0xA0 && value < 0xE0) {\n                    sjisKatakanaChars++;\n                    sjisCurDoubleBytesWordLength = 0;\n                    sjisCurKatakanaWordLength++;\n                    if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n                        sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n                    }\n                }\n                else if (value > 0x7F) {\n                    sjisBytesLeft++;\n                    // sjisDoubleBytesChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength++;\n                    if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n                        sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n                    }\n                }\n                else {\n                    // sjisLowChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength = 0;\n                }\n            }\n        }\n        if (canBeUTF8 && utf8BytesLeft > 0) {\n            canBeUTF8 = false;\n        }\n        if (canBeShiftJIS && sjisBytesLeft > 0) {\n            canBeShiftJIS = false;\n        }\n        // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n        if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n            return StringUtils.UTF8;\n        }\n        // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n        if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n            return StringUtils.SHIFT_JIS;\n        }\n        // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n        // - If we saw\n        //   - only two consecutive katakana chars in the whole text, or\n        //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n        // - then we conclude Shift_JIS, else ISO-8859-1\n        if (canBeISO88591 && canBeShiftJIS) {\n            return (sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2) || isoHighOther * 10 >= length\n                ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n        }\n        // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n        if (canBeISO88591) {\n            return StringUtils.ISO88591;\n        }\n        if (canBeShiftJIS) {\n            return StringUtils.SHIFT_JIS;\n        }\n        if (canBeUTF8) {\n            return StringUtils.UTF8;\n        }\n        // Otherwise, we take a wild guess with platform encoding\n        return StringUtils.PLATFORM_DEFAULT_ENCODING;\n    };\n    /**\n     *\n     * @see https://stackoverflow.com/a/13439711/4367683\n     *\n     * @param append The new string to append.\n     * @param args Argumets values to be formated.\n     */\n    StringUtils.format = function (append) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var i = -1;\n        function callback(exp, p0, p1, p2, p3, p4) {\n            if (exp === '%%')\n                return '%';\n            if (args[++i] === undefined)\n                return undefined;\n            exp = p2 ? parseInt(p2.substr(1)) : undefined;\n            var base = p3 ? parseInt(p3.substr(1)) : undefined;\n            var val;\n            switch (p4) {\n                case 's':\n                    val = args[i];\n                    break;\n                case 'c':\n                    val = args[i][0];\n                    break;\n                case 'f':\n                    val = parseFloat(args[i]).toFixed(exp);\n                    break;\n                case 'p':\n                    val = parseFloat(args[i]).toPrecision(exp);\n                    break;\n                case 'e':\n                    val = parseFloat(args[i]).toExponential(exp);\n                    break;\n                case 'x':\n                    val = parseInt(args[i]).toString(base ? base : 16);\n                    break;\n                case 'd':\n                    val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                    break;\n            }\n            val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n            var size = parseInt(p1); /* padding size */\n            var ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n            while (val.length < size)\n                val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n            return val;\n        }\n        var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n        return append.replace(regex, callback);\n    };\n    /**\n     *\n     */\n    StringUtils.getBytes = function (str, encoding) {\n        return StringEncoding_1.default.encode(str, encoding);\n    };\n    /**\n     * Returns the charcode at the specified index or at index zero.\n     */\n    StringUtils.getCharCode = function (str, index) {\n        if (index === void 0) { index = 0; }\n        return str.charCodeAt(index);\n    };\n    /**\n     * Returns char for given charcode\n     */\n    StringUtils.getCharAt = function (charCode) {\n        return String.fromCharCode(charCode);\n    };\n    StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n    StringUtils.GB2312 = 'GB2312';\n    StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n    StringUtils.EUC_JP = 'EUC_JP';\n    StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n    StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n    StringUtils.ASSUME_SHIFT_JIS = false;\n    return StringUtils;\n}());\nexports.default = StringUtils;\n//# sourceMappingURL=StringUtils.js.map"]},"metadata":{},"sourceType":"script"}